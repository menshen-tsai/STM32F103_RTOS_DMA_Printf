
STM32F103ZE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ce0  08007ce0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ce0  08007ce0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038a4  2000006c  08007d54  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003910  08007d54  00023910  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b459  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ae  00000000  00000000  0003b531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011da  00000000  00000000  00040f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb41  00000000  00000000  000420e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001baf0  00000000  00000000  0005ec23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6f41  00000000  00000000  0007a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006840  00000000  00000000  00121654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00127e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000006c 	.word	0x2000006c
 800020c:	00000000 	.word	0x00000000
 8000210:	08007ba8 	.word	0x08007ba8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000070 	.word	0x20000070
 800022c:	08007ba8 	.word	0x08007ba8

08000230 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <dma_printf_init+0x30>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 8000240:	4807      	ldr	r0, [pc, #28]	; (8000260 <dma_printf_init+0x30>)
 8000242:	f000 f87d 	bl	8000340 <dma_ring_init>
    dmi.sending = false;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <dma_printf_init+0x30>)
 8000248:	2200      	movs	r2, #0
 800024a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <dma_printf_init+0x30>)
 8000250:	2200      	movs	r2, #0
 8000252:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000088 	.word	0x20000088

08000264 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4619      	mov	r1, r3
 8000272:	4814      	ldr	r0, [pc, #80]	; (80002c4 <dma_printf_putc+0x60>)
 8000274:	f000 f8ac 	bl	80003d0 <dma_ring_putc>
    if(!dmi.sending){
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <dma_printf_putc+0x60>)
 800027a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800027e:	2b00      	cmp	r3, #0
 8000280:	d11b      	bne.n	80002ba <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8000282:	4810      	ldr	r0, [pc, #64]	; (80002c4 <dma_printf_putc+0x60>)
 8000284:	f000 f8fe 	bl	8000484 <dma_ring_available_linear>
 8000288:	4603      	mov	r3, r0
 800028a:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 800028c:	89fb      	ldrh	r3, [r7, #14]
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <dma_printf_putc+0x60>)
 8000290:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <dma_printf_putc+0x60>)
 8000296:	2201      	movs	r2, #1
 8000298:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <dma_printf_putc+0x60>)
 800029e:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 80002a2:	4808      	ldr	r0, [pc, #32]	; (80002c4 <dma_printf_putc+0x60>)
 80002a4:	f000 f910 	bl	80004c8 <dma_ring_get_r_ptr>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <dma_printf_putc+0x60>)
 80002ae:	4413      	add	r3, r2
 80002b0:	89fa      	ldrh	r2, [r7, #14]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4620      	mov	r0, r4
 80002b6:	f002 fee5 	bl	8003084 <HAL_UART_Transmit_DMA>
    }
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd90      	pop	{r4, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000088 	.word	0x20000088

080002c8 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <dma_printf_send_it+0x74>)
 80002d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d12b      	bne.n	8000334 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <dma_printf_send_it+0x74>)
 80002de:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80002e2:	4619      	mov	r1, r3
 80002e4:	4815      	ldr	r0, [pc, #84]	; (800033c <dma_printf_send_it+0x74>)
 80002e6:	f000 f8fb 	bl	80004e0 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <dma_printf_send_it+0x74>)
 80002ec:	f000 f8ca 	bl	8000484 <dma_ring_available_linear>
 80002f0:	4603      	mov	r3, r0
 80002f2:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 80002f4:	89fb      	ldrh	r3, [r7, #14]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d017      	beq.n	800032a <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 80002fa:	89fb      	ldrh	r3, [r7, #14]
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <dma_printf_send_it+0x74>)
 80002fe:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <dma_printf_send_it+0x74>)
 8000304:	2201      	movs	r2, #1
 8000306:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <dma_printf_send_it+0x74>)
 800030c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8000310:	480a      	ldr	r0, [pc, #40]	; (800033c <dma_printf_send_it+0x74>)
 8000312:	f000 f8d9 	bl	80004c8 <dma_ring_get_r_ptr>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <dma_printf_send_it+0x74>)
 800031c:	4413      	add	r3, r2
 800031e:	89fa      	ldrh	r2, [r7, #14]
 8000320:	4619      	mov	r1, r3
 8000322:	4620      	mov	r0, r4
 8000324:	f002 feae 	bl	8003084 <HAL_UART_Transmit_DMA>
 8000328:	e005      	b.n	8000336 <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <dma_printf_send_it+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000332:	e000      	b.n	8000336 <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8000334:	bf00      	nop
    }
}
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	bd90      	pop	{r4, r7, pc}
 800033c:	20000088 	.word	0x20000088

08000340 <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"

void dma_ring_init(struct dma_ring_buf *ring){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800034e:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <dma_ring_getc>:

int dma_ring_getc(struct dma_ring_buf *ring, uint8_t *c){
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  if(ring->r_ptr == ring->w_ptr) return RING_FAIL;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800038a:	429a      	cmp	r2, r3
 800038c:	d101      	bne.n	8000392 <dma_ring_getc+0x1e>
 800038e:	2301      	movs	r3, #1
 8000390:	e019      	b.n	80003c6 <dma_ring_getc+0x52>
  uint16_t next_ptr = ring->r_ptr+1;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000398:	3301      	adds	r3, #1
 800039a:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80003a2:	89fa      	ldrh	r2, [r7, #14]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d301      	bcc.n	80003ac <dma_ring_getc+0x38>
 80003a8:	2300      	movs	r3, #0
 80003aa:	81fb      	strh	r3, [r7, #14]

  *c = ring->buf[ring->r_ptr];
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	5c9a      	ldrb	r2, [r3, r2]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	701a      	strb	r2, [r3, #0]
  ring->r_ptr = next_ptr;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	89fa      	ldrh	r2, [r7, #14]
 80003c0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  return RING_SUCCESS;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <dma_ring_putc>:

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80003e2:	3301      	adds	r3, #1
 80003e4:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80003ec:	89fa      	ldrh	r2, [r7, #14]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d301      	bcc.n	80003f6 <dma_ring_putc+0x26>
 80003f2:	2300      	movs	r3, #0
 80003f4:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80003fc:	89fa      	ldrh	r2, [r7, #14]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d109      	bne.n	8000416 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000408:	3301      	adds	r3, #1
 800040a:	b29a      	uxth	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8000412:	2301      	movs	r3, #1
 8000414:	e00b      	b.n	800042e <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800041c:	4619      	mov	r1, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	78fa      	ldrb	r2, [r7, #3]
 8000422:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	89fa      	ldrh	r2, [r7, #14]
 8000428:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <dma_ring_available>:

int dma_ring_available(struct dma_ring_buf *ring){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800044c:	429a      	cmp	r2, r3
 800044e:	d308      	bcc.n	8000462 <dma_ring_available+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000456:	461a      	mov	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	e00b      	b.n	800047a <dma_ring_available+0x42>
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000468:	461a      	mov	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000470:	4413      	add	r3, r2
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
 8000478:	1a9b      	subs	r3, r3, r2
  }
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <dma_ring_available_linear>:
int dma_ring_available_linear(struct dma_ring_buf *ring){
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000498:	429a      	cmp	r2, r3
 800049a:	d308      	bcc.n	80004ae <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80004a2:	461a      	mov	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	e007      	b.n	80004be <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80004bc:	1ad3      	subs	r3, r2, r3
  }
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  while(len > 0){
 80004ea:	e018      	b.n	800051e <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80004f2:	3301      	adds	r3, #1
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 80004fa:	4293      	cmp	r3, r2
 80004fc:	db04      	blt.n	8000508 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000506:	e007      	b.n	8000518 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800050e:	3301      	adds	r3, #1
 8000510:	b29a      	uxth	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	603b      	str	r3, [r7, #0]
  while(len > 0){
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	dce3      	bgt.n	80004ec <dma_ring_forward_r_ptr+0xc>
  }
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <dma_ring_set_w_ptr>:

void dma_ring_set_w_ptr(struct dma_ring_buf *ring, uint16_t w_ptr){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	807b      	strh	r3, [r7, #2]
    ring->w_ptr = w_ptr;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	887a      	ldrh	r2, [r7, #2]
 8000540:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
	...

08000550 <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    dsi.huart = scanf_huart;
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <dma_scanf_init+0x34>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    dma_ring_init(&dsi.rx_ring);
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <dma_scanf_init+0x34>)
 8000562:	f7ff feed 	bl	8000340 <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <dma_scanf_init+0x34>)
 8000568:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <dma_scanf_init+0x34>)
 800056e:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8000572:	4904      	ldr	r1, [pc, #16]	; (8000584 <dma_scanf_init+0x34>)
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fdf5 	bl	8003164 <HAL_UART_Receive_DMA>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000049c 	.word	0x2000049c

08000588 <dma_scanf_getc_blocking>:

int dma_scanf_getc_blocking(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
    while(dma_ring_available(&dsi.rx_ring) == 0){
 800058e:	e00f      	b.n	80005b0 <dma_scanf_getc_blocking+0x28>
        dma_ring_set_w_ptr(&dsi.rx_ring, (uint16_t)((dsi.rx_ring.buf_size - dsi.huart->hdmarx->Instance->CNDTR)&0xFFFF));
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <dma_scanf_getc_blocking+0x48>)
 8000592:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <dma_scanf_getc_blocking+0x48>)
 8000598:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800059c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4619      	mov	r1, r3
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <dma_scanf_getc_blocking+0x48>)
 80005ac:	f7ff ffc0 	bl	8000530 <dma_ring_set_w_ptr>
    while(dma_ring_available(&dsi.rx_ring) == 0){
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <dma_scanf_getc_blocking+0x48>)
 80005b2:	f7ff ff41 	bl	8000438 <dma_ring_available>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e9      	beq.n	8000590 <dma_scanf_getc_blocking+0x8>
    }
    uint8_t c;
    dma_ring_getc(&dsi.rx_ring, &c);
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	4619      	mov	r1, r3
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <dma_scanf_getc_blocking+0x48>)
 80005c2:	f7ff fed7 	bl	8000374 <dma_ring_getc>
    return c;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000049c 	.word	0x2000049c

080005d4 <log_info>:
#include "main.h"
#include "log.h"
#include <stdarg.h>
#include <stdio.h>

void log_info(const char *msg, ...){
 80005d4:	b40f      	push	{r0, r1, r2, r3}
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
    fprintf(stdout, "[INFO]:");
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <log_info+0x4c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	2207      	movs	r2, #7
 80005e4:	2101      	movs	r1, #1
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <log_info+0x50>)
 80005e8:	f006 fde8 	bl	80071bc <fwrite>
    va_list ap;
    va_start(ap, msg);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	607b      	str	r3, [r7, #4]
    vfprintf(stdout, msg, ap);
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <log_info+0x4c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	6939      	ldr	r1, [r7, #16]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f006 fb17 	bl	8006c30 <vfiprintf>
    va_end(ap);
    fputc('\n', stdout);
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <log_info+0x4c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4619      	mov	r1, r3
 800060a:	200a      	movs	r0, #10
 800060c:	f006 fd64 	bl	80070d8 <fputc>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061a:	b004      	add	sp, #16
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000068 	.word	0x20000068
 8000624:	08007bc0 	.word	0x08007bc0

08000628 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  dma_printf_putc(ch&0xFF);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fe15 	bl	8000264 <dma_printf_putc>
  return ch;
 800063a:	687b      	ldr	r3, [r7, #4]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <__io_getchar>:

int __io_getchar(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  return dma_scanf_getc_blocking();
 8000648:	f7ff ff9e 	bl	8000588 <dma_scanf_getc_blocking>
 800064c:	4603      	mov	r3, r0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]

}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  dma_printf_send_it(huart);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff fe2b 	bl	80002c8 <dma_printf_send_it>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fc00 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f848 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 f912 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 f8ea 	bl	8000864 <MX_DMA_Init>
  MX_RTC_Init();
 8000690:	f000 f8a2 	bl	80007d8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000694:	f000 f8bc 	bl	8000810 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdin, NULL);
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <main+0x7c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 fdcd 	bl	8007240 <setbuf>
  setbuf(stdout, NULL);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <main+0x7c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fdc6 	bl	8007240 <setbuf>
  setbuf(stderr, NULL);
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <main+0x7c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f006 fdbf 	bl	8007240 <setbuf>
  dma_printf_init(&huart1);
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <main+0x80>)
 80006c4:	f7ff fdb4 	bl	8000230 <dma_printf_init>
  dma_scanf_init(&huart1);
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <main+0x80>)
 80006ca:	f7ff ff41 	bl	8000550 <dma_scanf_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ce:	f003 fc6b 	bl	8003fa8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <main+0x84>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <main+0x88>)
 80006d8:	f003 fccc 	bl	8004074 <osThreadNew>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <main+0x8c>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <main+0x90>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <main+0x94>)
 80006e8:	f003 fcc4 	bl	8004074 <osThreadNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <main+0x98>)
 80006f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f2:	f003 fc8b 	bl	800400c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0x7a>
 80006f8:	20000068 	.word	0x20000068
 80006fc:	200008bc 	.word	0x200008bc
 8000700:	08007c24 	.word	0x08007c24
 8000704:	0800092d 	.word	0x0800092d
 8000708:	2000098c 	.word	0x2000098c
 800070c:	08007c48 	.word	0x08007c48
 8000710:	0800093d 	.word	0x0800093d
 8000714:	20000990 	.word	0x20000990

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	; 0x58
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000722:	2228      	movs	r2, #40	; 0x28
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f006 ff18 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800074c:	2305      	movs	r3, #5
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800075a:	2301      	movs	r3, #1
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800076c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f001 faec 	bl	8001d54 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000782:	f000 f907 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fd58 	bl	8002258 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ae:	f000 f8f1 	bl	8000994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ba:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ff08 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ca:	f000 f8e3 	bl	8000994 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_RTC_Init+0x30>)
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_RTC_Init+0x34>)
 80007e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_RTC_Init+0x30>)
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_RTC_Init+0x30>)
 80007ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_RTC_Init+0x30>)
 80007f4:	f002 f87c 	bl	80028f0 <HAL_RTC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80007fe:	f000 f8c9 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200008a8 	.word	0x200008a8
 800080c:	40002800 	.word	0x40002800

08000810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART1_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000848:	f002 fbcc 	bl	8002fe4 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f89f 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200008bc 	.word	0x200008bc
 8000860:	40013800 	.word	0x40013800

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_DMA_Init+0x48>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_DMA_Init+0x48>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_DMA_Init+0x48>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2105      	movs	r1, #5
 8000886:	200e      	movs	r0, #14
 8000888:	f000 fbe3 	bl	8001052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800088c:	200e      	movs	r0, #14
 800088e:	f000 fbfc 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	200f      	movs	r0, #15
 8000898:	f000 fbdb 	bl	8001052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800089c:	200f      	movs	r0, #15
 800089e:	f000 fbf4 	bl	800108a <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_GPIO_Init+0x74>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_GPIO_Init+0x74>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_GPIO_Init+0x74>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0310 	and.w	r3, r3, #16
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_GPIO_Init+0x74>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a10      	ldr	r2, [pc, #64]	; (8000924 <MX_GPIO_Init+0x74>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_GPIO_Init+0x74>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	21f0      	movs	r1, #240	; 0xf0
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <MX_GPIO_Init+0x78>)
 80008fa:	f001 f9ed 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008fe:	23f0      	movs	r3, #240	; 0xf0
 8000900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2302      	movs	r3, #2
 800090c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0x78>)
 8000916:	f001 f84b 	bl	80019b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800

0800092c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f003 fc47 	bl	80041c8 <osDelay>
 800093a:	e7fb      	b.n	8000934 <StartDefaultTask+0x8>

0800093c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  uint32_t c = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000948:	2110      	movs	r1, #16
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <StartTask02+0x2c>)
 800094c:	f001 f9dc 	bl	8001d08 <HAL_GPIO_TogglePin>
	log_info("RESULT:%8ld\r", c++);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60fa      	str	r2, [r7, #12]
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <StartTask02+0x30>)
 800095a:	f7ff fe3b 	bl	80005d4 <log_info>
    osDelay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f003 fc32 	bl	80041c8 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000964:	e7f0      	b.n	8000948 <StartTask02+0xc>
 8000966:	bf00      	nop
 8000968:	40010800 	.word	0x40010800
 800096c:	08007bfc 	.word	0x08007bfc

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 fa95 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_MspInit+0x4c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_MspInit+0x4c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x4c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fb38 	bl	8001052 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <HAL_RTC_MspInit+0x3c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d110      	bne.n	8000a24 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000a02:	f001 f99b 	bl	8001d3c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_RTC_MspInit+0x40>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <HAL_RTC_MspInit+0x40>)
 8000a0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_RTC_MspInit+0x40>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_RTC_MspInit+0x44>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40002800 	.word	0x40002800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	4242043c 	.word	0x4242043c

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a47      	ldr	r2, [pc, #284]	; (8000b70 <HAL_UART_MspInit+0x138>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	f040 8086 	bne.w	8000b66 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <HAL_UART_MspInit+0x13c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <HAL_UART_MspInit+0x13c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <HAL_UART_MspInit+0x13c>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <HAL_UART_MspInit+0x13c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <HAL_UART_MspInit+0x13c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <HAL_UART_MspInit+0x13c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4836      	ldr	r0, [pc, #216]	; (8000b78 <HAL_UART_MspInit+0x140>)
 8000aa0:	f000 ff86 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482f      	ldr	r0, [pc, #188]	; (8000b78 <HAL_UART_MspInit+0x140>)
 8000aba:	f000 ff79 	bl	80019b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000ac0:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <HAL_UART_MspInit+0x148>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000aee:	4823      	ldr	r0, [pc, #140]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000af0:	f000 fada 	bl	80010a8 <HAL_DMA_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000afa:	f7ff ff4b 	bl	8000994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <HAL_UART_MspInit+0x144>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_UART_MspInit+0x150>)
 8000b0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b3c:	f000 fab4 	bl	80010a8 <HAL_DMA_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000b46:	f7ff ff25 	bl	8000994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <HAL_UART_MspInit+0x14c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2025      	movs	r0, #37	; 0x25
 8000b5c:	f000 fa79 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b60:	2025      	movs	r0, #37	; 0x25
 8000b62:	f000 fa92 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40013800 	.word	0x40013800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	20000904 	.word	0x20000904
 8000b80:	40020058 	.word	0x40020058
 8000b84:	20000948 	.word	0x20000948
 8000b88:	40020044 	.word	0x40020044

08000b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_InitTick+0xd0>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <HAL_InitTick+0xd0>)
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_InitTick+0xd0>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bba:	f107 020c 	add.w	r2, r7, #12
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fcb7 	bl	8002538 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bca:	f001 fca1 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8000bce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_InitTick+0xd4>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_InitTick+0xd8>)
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <HAL_InitTick+0xdc>)
 8000be2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_InitTick+0xd8>)
 8000be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_InitTick+0xd8>)
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xd8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_InitTick+0xd8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_InitTick+0xd8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <HAL_InitTick+0xd8>)
 8000c06:	f001 ff7c 	bl	8002b02 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11b      	bne.n	8000c50 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <HAL_InitTick+0xd8>)
 8000c1a:	f001 ffcb 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d111      	bne.n	8000c50 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c2c:	2019      	movs	r0, #25
 8000c2e:	f000 fa2c 	bl	800108a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d808      	bhi.n	8000c4a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2019      	movs	r0, #25
 8000c3e:	f000 fa08 	bl	8001052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0xe0>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e002      	b.n	8000c50 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3730      	adds	r7, #48	; 0x30
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	20000994 	.word	0x20000994
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	20000004 	.word	0x20000004

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
	...

08000c9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <DMA1_Channel4_IRQHandler+0x10>)
 8000ca2:	f000 fc1b 	bl	80014dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000948 	.word	0x20000948

08000cb0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x10>)
 8000cb6:	f000 fc11 	bl	80014dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000904 	.word	0x20000904

08000cc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM1_UP_IRQHandler+0x10>)
 8000cca:	f001 ffd3 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000994 	.word	0x20000994

08000cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART1_IRQHandler+0x10>)
 8000cde:	f002 fa67 	bl	80031b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200008bc 	.word	0x200008bc

08000cec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfe:	f7ff fca1 	bl	8000644 <__io_getchar>
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
  }

  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fc71 	bl	8000628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
  }
  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d84:	605a      	str	r2, [r3, #4]
  return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f006 fc58 	bl	80076a4 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20010000 	.word	0x20010000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200009dc 	.word	0x200009dc
 8000e28:	20003910 	.word	0x20003910

08000e2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff fff8 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e54:	4c09      	ldr	r4, [pc, #36]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f006 fc25 	bl	80076b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fc09 	bl	800067c <main>
  bx lr
 8000e6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e74:	08007ce8 	.word	0x08007ce8
  ldr r2, =_sbss
 8000e78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e7c:	20003910 	.word	0x20003910

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8d1 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff fe76 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fd7e 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200009e0 	.word	0x200009e0

08000ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	200009e0 	.word	0x200009e0

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4906      	ldr	r1, [pc, #24]	; (8000f80 <__NVIC_EnableIRQ+0x34>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff4f 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff64 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ffb2 	bl	8000fd8 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff81 	bl	8000f84 <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff57 	bl	8000f4c <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e059      	b.n	8001172 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_DMA_Init+0xd4>)
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d80f      	bhi.n	80010ea <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_DMA_Init+0xd8>)
 80010d2:	4413      	add	r3, r2
 80010d4:	4a2b      	ldr	r2, [pc, #172]	; (8001184 <HAL_DMA_Init+0xdc>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	009a      	lsls	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a28      	ldr	r2, [pc, #160]	; (8001188 <HAL_DMA_Init+0xe0>)
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80010e8:	e00e      	b.n	8001108 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_DMA_Init+0xe4>)
 80010f2:	4413      	add	r3, r2
 80010f4:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_DMA_Init+0xdc>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <HAL_DMA_Init+0xe8>)
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800111e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001122:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800112c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40020407 	.word	0x40020407
 8001180:	bffdfff8 	.word	0xbffdfff8
 8001184:	cccccccd 	.word	0xcccccccd
 8001188:	40020000 	.word	0x40020000
 800118c:	bffdfbf8 	.word	0xbffdfbf8
 8001190:	40020400 	.word	0x40020400

08001194 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_DMA_Start_IT+0x20>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e04b      	b.n	800124c <HAL_DMA_Start_IT+0xb8>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d13a      	bne.n	800123e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 fbb1 	bl	8001954 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 020e 	orr.w	r2, r2, #14
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e00f      	b.n	800122c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0204 	bic.w	r2, r2, #4
 800121a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 020a 	orr.w	r2, r2, #10
 800122a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e005      	b.n	800124a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001246:	2302      	movs	r3, #2
 8001248:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800124a:	7dfb      	ldrb	r3, [r7, #23]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d008      	beq.n	800127e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2204      	movs	r2, #4
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e020      	b.n	80012c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 020e 	bic.w	r2, r2, #14
 800128c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d005      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2204      	movs	r2, #4
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e0d6      	b.n	800149e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 020e 	bic.w	r2, r2, #14
 80012fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001318:	429a      	cmp	r2, r3
 800131a:	d958      	bls.n	80013ce <HAL_DMA_Abort_IT+0x102>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a62      	ldr	r2, [pc, #392]	; (80014ac <HAL_DMA_Abort_IT+0x1e0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d04f      	beq.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a61      	ldr	r2, [pc, #388]	; (80014b0 <HAL_DMA_Abort_IT+0x1e4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d048      	beq.n	80013c2 <HAL_DMA_Abort_IT+0xf6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d040      	beq.n	80013bc <HAL_DMA_Abort_IT+0xf0>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <HAL_DMA_Abort_IT+0x1ec>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d038      	beq.n	80013b6 <HAL_DMA_Abort_IT+0xea>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a5c      	ldr	r2, [pc, #368]	; (80014bc <HAL_DMA_Abort_IT+0x1f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d030      	beq.n	80013b0 <HAL_DMA_Abort_IT+0xe4>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5b      	ldr	r2, [pc, #364]	; (80014c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d028      	beq.n	80013aa <HAL_DMA_Abort_IT+0xde>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_DMA_Abort_IT+0x1dc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d020      	beq.n	80013a4 <HAL_DMA_Abort_IT+0xd8>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d019      	beq.n	80013a0 <HAL_DMA_Abort_IT+0xd4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d012      	beq.n	800139c <HAL_DMA_Abort_IT+0xd0>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_DMA_Abort_IT+0x200>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00a      	beq.n	8001396 <HAL_DMA_Abort_IT+0xca>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_DMA_Abort_IT+0x204>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d102      	bne.n	8001390 <HAL_DMA_Abort_IT+0xc4>
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	e01b      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	e018      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 8001396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139a:	e015      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 800139c:	2310      	movs	r3, #16
 800139e:	e013      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e011      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a8:	e00e      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ae:	e00b      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	e008      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	e005      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c0:	e002      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013c2:	2310      	movs	r3, #16
 80013c4:	e000      	b.n	80013c8 <HAL_DMA_Abort_IT+0xfc>
 80013c6:	2301      	movs	r3, #1
 80013c8:	4a42      	ldr	r2, [pc, #264]	; (80014d4 <HAL_DMA_Abort_IT+0x208>)
 80013ca:	6053      	str	r3, [r2, #4]
 80013cc:	e057      	b.n	800147e <HAL_DMA_Abort_IT+0x1b2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a36      	ldr	r2, [pc, #216]	; (80014ac <HAL_DMA_Abort_IT+0x1e0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d04f      	beq.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a34      	ldr	r2, [pc, #208]	; (80014b0 <HAL_DMA_Abort_IT+0x1e4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d048      	beq.n	8001474 <HAL_DMA_Abort_IT+0x1a8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <HAL_DMA_Abort_IT+0x1e8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d040      	beq.n	800146e <HAL_DMA_Abort_IT+0x1a2>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_DMA_Abort_IT+0x1ec>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d038      	beq.n	8001468 <HAL_DMA_Abort_IT+0x19c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <HAL_DMA_Abort_IT+0x1f0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d030      	beq.n	8001462 <HAL_DMA_Abort_IT+0x196>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2e      	ldr	r2, [pc, #184]	; (80014c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d028      	beq.n	800145c <HAL_DMA_Abort_IT+0x190>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d020      	beq.n	8001456 <HAL_DMA_Abort_IT+0x18a>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <HAL_DMA_Abort_IT+0x1f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d019      	beq.n	8001452 <HAL_DMA_Abort_IT+0x186>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d012      	beq.n	800144e <HAL_DMA_Abort_IT+0x182>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_DMA_Abort_IT+0x200>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00a      	beq.n	8001448 <HAL_DMA_Abort_IT+0x17c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <HAL_DMA_Abort_IT+0x204>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d102      	bne.n	8001442 <HAL_DMA_Abort_IT+0x176>
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	e01b      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001446:	e018      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144c:	e015      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 800144e:	2310      	movs	r3, #16
 8001450:	e013      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001452:	2301      	movs	r3, #1
 8001454:	e011      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800145a:	e00e      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 800145c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001460:	e00b      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	e008      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	e005      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 800146e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001472:	e002      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001474:	2310      	movs	r3, #16
 8001476:	e000      	b.n	800147a <HAL_DMA_Abort_IT+0x1ae>
 8001478:	2301      	movs	r3, #1
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_DMA_Abort_IT+0x20c>)
 800147c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
    } 
  }
  return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020080 	.word	0x40020080
 80014ac:	40020008 	.word	0x40020008
 80014b0:	4002001c 	.word	0x4002001c
 80014b4:	40020030 	.word	0x40020030
 80014b8:	40020044 	.word	0x40020044
 80014bc:	40020058 	.word	0x40020058
 80014c0:	4002006c 	.word	0x4002006c
 80014c4:	40020408 	.word	0x40020408
 80014c8:	4002041c 	.word	0x4002041c
 80014cc:	40020430 	.word	0x40020430
 80014d0:	40020444 	.word	0x40020444
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2204      	movs	r2, #4
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80f1 	beq.w	80016e8 <HAL_DMA_IRQHandler+0x20c>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80eb 	beq.w	80016e8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b00      	cmp	r3, #0
 800151e:	d107      	bne.n	8001530 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0204 	bic.w	r2, r2, #4
 800152e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_DMA_IRQHandler+0x1d8>)
 8001538:	429a      	cmp	r2, r3
 800153a:	d958      	bls.n	80015ee <HAL_DMA_IRQHandler+0x112>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a5d      	ldr	r2, [pc, #372]	; (80016b8 <HAL_DMA_IRQHandler+0x1dc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d04f      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x10a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a5c      	ldr	r2, [pc, #368]	; (80016bc <HAL_DMA_IRQHandler+0x1e0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d048      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x106>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HAL_DMA_IRQHandler+0x1e4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d040      	beq.n	80015dc <HAL_DMA_IRQHandler+0x100>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a59      	ldr	r2, [pc, #356]	; (80016c4 <HAL_DMA_IRQHandler+0x1e8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d038      	beq.n	80015d6 <HAL_DMA_IRQHandler+0xfa>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <HAL_DMA_IRQHandler+0x1ec>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d030      	beq.n	80015d0 <HAL_DMA_IRQHandler+0xf4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a56      	ldr	r2, [pc, #344]	; (80016cc <HAL_DMA_IRQHandler+0x1f0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d028      	beq.n	80015ca <HAL_DMA_IRQHandler+0xee>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_DMA_IRQHandler+0x1d8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d020      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xe8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_DMA_IRQHandler+0x1f4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d019      	beq.n	80015c0 <HAL_DMA_IRQHandler+0xe4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_DMA_IRQHandler+0x1f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d012      	beq.n	80015bc <HAL_DMA_IRQHandler+0xe0>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_DMA_IRQHandler+0x1fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00a      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xda>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <HAL_DMA_IRQHandler+0x200>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d102      	bne.n	80015b0 <HAL_DMA_IRQHandler+0xd4>
 80015aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ae:	e01b      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015b4:	e018      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ba:	e015      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015bc:	2340      	movs	r3, #64	; 0x40
 80015be:	e013      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e011      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015c8:	e00e      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ce:	e00b      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015d4:	e008      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015da:	e005      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e0:	e002      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015e2:	2340      	movs	r3, #64	; 0x40
 80015e4:	e000      	b.n	80015e8 <HAL_DMA_IRQHandler+0x10c>
 80015e6:	2304      	movs	r3, #4
 80015e8:	4a3d      	ldr	r2, [pc, #244]	; (80016e0 <HAL_DMA_IRQHandler+0x204>)
 80015ea:	6053      	str	r3, [r2, #4]
 80015ec:	e057      	b.n	800169e <HAL_DMA_IRQHandler+0x1c2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <HAL_DMA_IRQHandler+0x1dc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d04f      	beq.n	8001698 <HAL_DMA_IRQHandler+0x1bc>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_DMA_IRQHandler+0x1e0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d048      	beq.n	8001694 <HAL_DMA_IRQHandler+0x1b8>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <HAL_DMA_IRQHandler+0x1e4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d040      	beq.n	800168e <HAL_DMA_IRQHandler+0x1b2>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2c      	ldr	r2, [pc, #176]	; (80016c4 <HAL_DMA_IRQHandler+0x1e8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d038      	beq.n	8001688 <HAL_DMA_IRQHandler+0x1ac>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2b      	ldr	r2, [pc, #172]	; (80016c8 <HAL_DMA_IRQHandler+0x1ec>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d030      	beq.n	8001682 <HAL_DMA_IRQHandler+0x1a6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a29      	ldr	r2, [pc, #164]	; (80016cc <HAL_DMA_IRQHandler+0x1f0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d028      	beq.n	800167c <HAL_DMA_IRQHandler+0x1a0>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_DMA_IRQHandler+0x1d8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d020      	beq.n	8001676 <HAL_DMA_IRQHandler+0x19a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_DMA_IRQHandler+0x1f4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_DMA_IRQHandler+0x196>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_DMA_IRQHandler+0x1f8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d012      	beq.n	800166e <HAL_DMA_IRQHandler+0x192>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_DMA_IRQHandler+0x1fc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00a      	beq.n	8001668 <HAL_DMA_IRQHandler+0x18c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a21      	ldr	r2, [pc, #132]	; (80016dc <HAL_DMA_IRQHandler+0x200>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d102      	bne.n	8001662 <HAL_DMA_IRQHandler+0x186>
 800165c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001660:	e01b      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001662:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001666:	e018      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166c:	e015      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	e013      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001672:	2304      	movs	r3, #4
 8001674:	e011      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001676:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800167a:	e00e      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 800167c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001680:	e00b      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001682:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001686:	e008      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800168c:	e005      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	e002      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001694:	2340      	movs	r3, #64	; 0x40
 8001696:	e000      	b.n	800169a <HAL_DMA_IRQHandler+0x1be>
 8001698:	2304      	movs	r3, #4
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <HAL_DMA_IRQHandler+0x208>)
 800169c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8136 	beq.w	8001914 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	e130      	b.n	8001914 <HAL_DMA_IRQHandler+0x438>
 80016b2:	bf00      	nop
 80016b4:	40020080 	.word	0x40020080
 80016b8:	40020008 	.word	0x40020008
 80016bc:	4002001c 	.word	0x4002001c
 80016c0:	40020030 	.word	0x40020030
 80016c4:	40020044 	.word	0x40020044
 80016c8:	40020058 	.word	0x40020058
 80016cc:	4002006c 	.word	0x4002006c
 80016d0:	40020408 	.word	0x40020408
 80016d4:	4002041c 	.word	0x4002041c
 80016d8:	40020430 	.word	0x40020430
 80016dc:	40020444 	.word	0x40020444
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2202      	movs	r2, #2
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80dd 	beq.w	80018b4 <HAL_DMA_IRQHandler+0x3d8>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80d7 	beq.w	80018b4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10b      	bne.n	800172c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 020a 	bic.w	r2, r2, #10
 8001722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <HAL_DMA_IRQHandler+0x444>)
 8001734:	429a      	cmp	r2, r3
 8001736:	d958      	bls.n	80017ea <HAL_DMA_IRQHandler+0x30e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a79      	ldr	r2, [pc, #484]	; (8001924 <HAL_DMA_IRQHandler+0x448>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d04f      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x306>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a78      	ldr	r2, [pc, #480]	; (8001928 <HAL_DMA_IRQHandler+0x44c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d048      	beq.n	80017de <HAL_DMA_IRQHandler+0x302>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a76      	ldr	r2, [pc, #472]	; (800192c <HAL_DMA_IRQHandler+0x450>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d040      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2fc>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a75      	ldr	r2, [pc, #468]	; (8001930 <HAL_DMA_IRQHandler+0x454>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d038      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2f6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a73      	ldr	r2, [pc, #460]	; (8001934 <HAL_DMA_IRQHandler+0x458>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d030      	beq.n	80017cc <HAL_DMA_IRQHandler+0x2f0>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a72      	ldr	r2, [pc, #456]	; (8001938 <HAL_DMA_IRQHandler+0x45c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d028      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x2ea>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a69      	ldr	r2, [pc, #420]	; (8001920 <HAL_DMA_IRQHandler+0x444>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d020      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x2e4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_DMA_IRQHandler+0x460>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d019      	beq.n	80017bc <HAL_DMA_IRQHandler+0x2e0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6c      	ldr	r2, [pc, #432]	; (8001940 <HAL_DMA_IRQHandler+0x464>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d012      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x2dc>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6b      	ldr	r2, [pc, #428]	; (8001944 <HAL_DMA_IRQHandler+0x468>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00a      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x2d6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a69      	ldr	r2, [pc, #420]	; (8001948 <HAL_DMA_IRQHandler+0x46c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <HAL_DMA_IRQHandler+0x2d0>
 80017a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017aa:	e01b      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b0:	e018      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b6:	e015      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017b8:	2320      	movs	r3, #32
 80017ba:	e013      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017bc:	2302      	movs	r3, #2
 80017be:	e011      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c4:	e00e      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ca:	e00b      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d0:	e008      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	e005      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	e002      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017de:	2320      	movs	r3, #32
 80017e0:	e000      	b.n	80017e4 <HAL_DMA_IRQHandler+0x308>
 80017e2:	2302      	movs	r3, #2
 80017e4:	4a59      	ldr	r2, [pc, #356]	; (800194c <HAL_DMA_IRQHandler+0x470>)
 80017e6:	6053      	str	r3, [r2, #4]
 80017e8:	e057      	b.n	800189a <HAL_DMA_IRQHandler+0x3be>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_DMA_IRQHandler+0x448>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d04f      	beq.n	8001894 <HAL_DMA_IRQHandler+0x3b8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_DMA_IRQHandler+0x44c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d048      	beq.n	8001890 <HAL_DMA_IRQHandler+0x3b4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_DMA_IRQHandler+0x450>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d040      	beq.n	800188a <HAL_DMA_IRQHandler+0x3ae>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_DMA_IRQHandler+0x454>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d038      	beq.n	8001884 <HAL_DMA_IRQHandler+0x3a8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_DMA_IRQHandler+0x458>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d030      	beq.n	800187e <HAL_DMA_IRQHandler+0x3a2>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_DMA_IRQHandler+0x45c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d028      	beq.n	8001878 <HAL_DMA_IRQHandler+0x39c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_DMA_IRQHandler+0x444>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d020      	beq.n	8001872 <HAL_DMA_IRQHandler+0x396>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a41      	ldr	r2, [pc, #260]	; (800193c <HAL_DMA_IRQHandler+0x460>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d019      	beq.n	800186e <HAL_DMA_IRQHandler+0x392>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a40      	ldr	r2, [pc, #256]	; (8001940 <HAL_DMA_IRQHandler+0x464>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0x38e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3e      	ldr	r2, [pc, #248]	; (8001944 <HAL_DMA_IRQHandler+0x468>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00a      	beq.n	8001864 <HAL_DMA_IRQHandler+0x388>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a3d      	ldr	r2, [pc, #244]	; (8001948 <HAL_DMA_IRQHandler+0x46c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d102      	bne.n	800185e <HAL_DMA_IRQHandler+0x382>
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	e01b      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 800185e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001862:	e018      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 8001864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001868:	e015      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 800186a:	2320      	movs	r3, #32
 800186c:	e013      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 800186e:	2302      	movs	r3, #2
 8001870:	e011      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 8001872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001876:	e00e      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 8001878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800187c:	e00b      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 800187e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001882:	e008      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	e005      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 800188a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188e:	e002      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 8001890:	2320      	movs	r3, #32
 8001892:	e000      	b.n	8001896 <HAL_DMA_IRQHandler+0x3ba>
 8001894:	2302      	movs	r3, #2
 8001896:	4a2e      	ldr	r2, [pc, #184]	; (8001950 <HAL_DMA_IRQHandler+0x474>)
 8001898:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d034      	beq.n	8001914 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018b2:	e02f      	b.n	8001914 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2208      	movs	r2, #8
 80018ba:	409a      	lsls	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d028      	beq.n	8001916 <HAL_DMA_IRQHandler+0x43a>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d023      	beq.n	8001916 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 020e 	bic.w	r2, r2, #14
 80018dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
    }
  }
  return;
 8001914:	bf00      	nop
 8001916:	bf00      	nop
}
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020080 	.word	0x40020080
 8001924:	40020008 	.word	0x40020008
 8001928:	4002001c 	.word	0x4002001c
 800192c:	40020030 	.word	0x40020030
 8001930:	40020044 	.word	0x40020044
 8001934:	40020058 	.word	0x40020058
 8001938:	4002006c 	.word	0x4002006c
 800193c:	40020408 	.word	0x40020408
 8001940:	4002041c 	.word	0x4002041c
 8001944:	40020430 	.word	0x40020430
 8001948:	40020444 	.word	0x40020444
 800194c:	40020400 	.word	0x40020400
 8001950:	40020000 	.word	0x40020000

08001954 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b10      	cmp	r3, #16
 8001980:	d108      	bne.n	8001994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001992:	e007      	b.n	80019a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b08b      	sub	sp, #44	; 0x2c
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e179      	b.n	8001cb8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c4:	2201      	movs	r2, #1
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 8168 	bne.w	8001cb2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a96      	ldr	r2, [pc, #600]	; (8001c40 <HAL_GPIO_Init+0x290>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d05e      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 80019ec:	4a94      	ldr	r2, [pc, #592]	; (8001c40 <HAL_GPIO_Init+0x290>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d875      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 80019f2:	4a94      	ldr	r2, [pc, #592]	; (8001c44 <HAL_GPIO_Init+0x294>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d058      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 80019f8:	4a92      	ldr	r2, [pc, #584]	; (8001c44 <HAL_GPIO_Init+0x294>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d86f      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 80019fe:	4a92      	ldr	r2, [pc, #584]	; (8001c48 <HAL_GPIO_Init+0x298>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d052      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 8001a04:	4a90      	ldr	r2, [pc, #576]	; (8001c48 <HAL_GPIO_Init+0x298>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d869      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a0a:	4a90      	ldr	r2, [pc, #576]	; (8001c4c <HAL_GPIO_Init+0x29c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d04c      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 8001a10:	4a8e      	ldr	r2, [pc, #568]	; (8001c4c <HAL_GPIO_Init+0x29c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d863      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a16:	4a8e      	ldr	r2, [pc, #568]	; (8001c50 <HAL_GPIO_Init+0x2a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d046      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 8001a1c:	4a8c      	ldr	r2, [pc, #560]	; (8001c50 <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d85d      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a22:	2b12      	cmp	r3, #18
 8001a24:	d82a      	bhi.n	8001a7c <HAL_GPIO_Init+0xcc>
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d859      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_GPIO_Init+0x80>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001aab 	.word	0x08001aab
 8001a34:	08001a85 	.word	0x08001a85
 8001a38:	08001a97 	.word	0x08001a97
 8001a3c:	08001ad9 	.word	0x08001ad9
 8001a40:	08001adf 	.word	0x08001adf
 8001a44:	08001adf 	.word	0x08001adf
 8001a48:	08001adf 	.word	0x08001adf
 8001a4c:	08001adf 	.word	0x08001adf
 8001a50:	08001adf 	.word	0x08001adf
 8001a54:	08001adf 	.word	0x08001adf
 8001a58:	08001adf 	.word	0x08001adf
 8001a5c:	08001adf 	.word	0x08001adf
 8001a60:	08001adf 	.word	0x08001adf
 8001a64:	08001adf 	.word	0x08001adf
 8001a68:	08001adf 	.word	0x08001adf
 8001a6c:	08001adf 	.word	0x08001adf
 8001a70:	08001adf 	.word	0x08001adf
 8001a74:	08001a8d 	.word	0x08001a8d
 8001a78:	08001aa1 	.word	0x08001aa1
 8001a7c:	4a75      	ldr	r2, [pc, #468]	; (8001c54 <HAL_GPIO_Init+0x2a4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a82:	e02c      	b.n	8001ade <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e029      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	3304      	adds	r3, #4
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e024      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	623b      	str	r3, [r7, #32]
          break;
 8001a9e:	e01f      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e01a      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e013      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	611a      	str	r2, [r3, #16]
          break;
 8001aca:	e009      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	615a      	str	r2, [r3, #20]
          break;
 8001ad6:	e003      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          break;
 8001ade:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2bff      	cmp	r3, #255	; 0xff
 8001ae4:	d801      	bhi.n	8001aea <HAL_GPIO_Init+0x13a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_Init+0x13e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3304      	adds	r3, #4
 8001aee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d802      	bhi.n	8001afc <HAL_GPIO_Init+0x14c>
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x152>
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3b08      	subs	r3, #8
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	210f      	movs	r1, #15
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	6a39      	ldr	r1, [r7, #32]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80c1 	beq.w	8001cb2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b30:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <HAL_GPIO_Init+0x2a8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2a8>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <HAL_GPIO_Init+0x2ac>)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <HAL_GPIO_Init+0x2b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d01f      	beq.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_GPIO_Init+0x2b4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d019      	beq.n	8001bb0 <HAL_GPIO_Init+0x200>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3a      	ldr	r2, [pc, #232]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1fc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a39      	ldr	r2, [pc, #228]	; (8001c6c <HAL_GPIO_Init+0x2bc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1f8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <HAL_GPIO_Init+0x2c0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1f4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a37      	ldr	r2, [pc, #220]	; (8001c74 <HAL_GPIO_Init+0x2c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1f0>
 8001b9c:	2305      	movs	r3, #5
 8001b9e:	e00a      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	e008      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e004      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bc6:	4925      	ldr	r1, [pc, #148]	; (8001c5c <HAL_GPIO_Init+0x2ac>)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4924      	ldr	r1, [pc, #144]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4920      	ldr	r1, [pc, #128]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	491a      	ldr	r1, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d025      	beq.n	8001c7c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4910      	ldr	r1, [pc, #64]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e025      	b.n	8001c8a <HAL_GPIO_Init+0x2da>
 8001c3e:	bf00      	nop
 8001c40:	10320000 	.word	0x10320000
 8001c44:	10310000 	.word	0x10310000
 8001c48:	10220000 	.word	0x10220000
 8001c4c:	10210000 	.word	0x10210000
 8001c50:	10120000 	.word	0x10120000
 8001c54:	10110000 	.word	0x10110000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40010800 	.word	0x40010800
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	40011800 	.word	0x40011800
 8001c74:	40011c00 	.word	0x40011c00
 8001c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4913      	ldr	r1, [pc, #76]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f ae7e 	bne.w	80019c4 <HAL_GPIO_Init+0x14>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	372c      	adds	r7, #44	; 0x2c
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43d9      	mvns	r1, r3
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	400b      	ands	r3, r1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	611a      	str	r2, [r3, #16]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	420e0020 	.word	0x420e0020

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e272      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8087 	beq.w	8001e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d74:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d00c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d80:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d112      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5e>
 8001d8c:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d10b      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	4b89      	ldr	r3, [pc, #548]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d06c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x12c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d168      	bne.n	8001e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e24c      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x76>
 8001dbc:	4b80      	ldr	r3, [pc, #512]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a7f      	ldr	r2, [pc, #508]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e02e      	b.n	8001e28 <HAL_RCC_OscConfig+0xd4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x98>
 8001dd2:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7a      	ldr	r2, [pc, #488]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a77      	ldr	r2, [pc, #476]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e01d      	b.n	8001e28 <HAL_RCC_OscConfig+0xd4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0xbc>
 8001df6:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a71      	ldr	r2, [pc, #452]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6e      	ldr	r2, [pc, #440]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0xd4>
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a67      	ldr	r2, [pc, #412]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff f850 	bl	8000ed4 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff f84c 	bl	8000ed4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e200      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe4>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f83c 	bl	8000ed4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f838 	bl	8000ed4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1ec      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x10c>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d063      	beq.n	8001f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x18c>
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d116      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x176>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e1c0      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4939      	ldr	r1, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	e03a      	b.n	8001f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fff1 	bl	8000ed4 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7fe ffed 	bl	8000ed4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1a1      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4927      	ldr	r1, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
 8001f28:	e015      	b.n	8001f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe ffd0 	bl	8000ed4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe ffcc 	bl	8000ed4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e180      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d03a      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d019      	beq.n	8001f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7fe ffb0 	bl	8000ed4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7fe ffac 	bl	8000ed4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e160      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 fafe 	bl	8002598 <RCC_Delay>
 8001f9c:	e01c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7fe ff96 	bl	8000ed4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001faa:	e00f      	b.n	8001fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe ff92 	bl	8000ed4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d908      	bls.n	8001fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e146      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	42420000 	.word	0x42420000
 8001fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	4b92      	ldr	r3, [pc, #584]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e9      	bne.n	8001fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a6 	beq.w	8002132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4a87      	ldr	r2, [pc, #540]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	61d3      	str	r3, [r2, #28]
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200e:	2301      	movs	r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7e      	ldr	r2, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7fe ff53 	bl	8000ed4 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7fe ff4f 	bl	8000ed4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b64      	cmp	r3, #100	; 0x64
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e103      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b75      	ldr	r3, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x312>
 8002058:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e02d      	b.n	80020c2 <HAL_RCC_OscConfig+0x36e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x334>
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a69      	ldr	r2, [pc, #420]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a66      	ldr	r2, [pc, #408]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
 8002086:	e01c      	b.n	80020c2 <HAL_RCC_OscConfig+0x36e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b05      	cmp	r3, #5
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x356>
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a60      	ldr	r2, [pc, #384]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4b5e      	ldr	r3, [pc, #376]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e00b      	b.n	80020c2 <HAL_RCC_OscConfig+0x36e>
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d015      	beq.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7fe ff03 	bl	8000ed4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe feff 	bl	8000ed4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0b1      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ee      	beq.n	80020d2 <HAL_RCC_OscConfig+0x37e>
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7fe feed 	bl	8000ed4 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fee9 	bl	8000ed4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e09b      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002114:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ee      	bne.n	80020fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a3b      	ldr	r2, [pc, #236]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b08      	cmp	r3, #8
 8002146:	d061      	beq.n	800220c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d146      	bne.n	80021de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7fe febd 	bl	8000ed4 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe feb9 	bl	8000ed4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e06d      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d108      	bne.n	8002198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4921      	ldr	r1, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a19      	ldr	r1, [r3, #32]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	430b      	orrs	r3, r1
 80021aa:	491b      	ldr	r1, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x4cc>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe fe8d 	bl	8000ed4 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe fe89 	bl	8000ed4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e03d      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x46a>
 80021dc:	e035      	b.n	800224a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fe76 	bl	8000ed4 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fe72 	bl	8000ed4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e026      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x498>
 800220a:	e01e      	b.n	800224a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e019      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
 8002220:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_OscConfig+0x500>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	429a      	cmp	r2, r3
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d0      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4965      	ldr	r1, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d040      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e073      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7fe fdc4 	bl	8000ed4 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe fdc0 	bl	8000ed4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e053      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d210      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f821 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1cc>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fbc0 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	08007c6c 	.word	0x08007c6c
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x30>
 8002456:	2b08      	cmp	r3, #8
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x36>
 800245a:	e027      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800245e:	613b      	str	r3, [r7, #16]
      break;
 8002460:	e027      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	0c5b      	lsrs	r3, r3, #17
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800248e:	fb03 f202 	mul.w	r2, r3, r2
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e004      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	613b      	str	r3, [r7, #16]
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ae:	613b      	str	r3, [r7, #16]
      break;
 80024b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b2:	693b      	ldr	r3, [r7, #16]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	007a1200 	.word	0x007a1200
 80024c8:	08007c84 	.word	0x08007c84
 80024cc:	08007c94 	.word	0x08007c94
 80024d0:	003d0900 	.word	0x003d0900

080024d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ec:	f7ff fff2 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08007c7c 	.word	0x08007c7c

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffde 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0adb      	lsrs	r3, r3, #11
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	08007c7c 	.word	0x08007c7c

08002538 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	220f      	movs	r2, #15
 8002546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_GetClockConfig+0x58>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_GetClockConfig+0x58>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_GetClockConfig+0x58>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_RCC_GetClockConfig+0x58>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	40022000 	.word	0x40022000

08002598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <RCC_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <RCC_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <RCC_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000000 	.word	0x20000000
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d07d      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	61d3      	str	r3, [r2, #28]
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d118      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002628:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a42      	ldr	r2, [pc, #264]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002634:	f7fe fc4e 	bl	8000ed4 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	e008      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe fc4a 	bl	8000ed4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e06d      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d02e      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d027      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002680:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800268e:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fc19 	bl	8000ed4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe fc15 	bl	8000ed4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e036      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4917      	ldr	r1, [pc, #92]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	490b      	ldr	r1, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	42420440 	.word	0x42420440

08002740 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	2b0f      	cmp	r3, #15
 8002762:	f200 80af 	bhi.w	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	08002843 	.word	0x08002843
 8002770:	080028a9 	.word	0x080028a9
 8002774:	080028c5 	.word	0x080028c5
 8002778:	08002833 	.word	0x08002833
 800277c:	080028c5 	.word	0x080028c5
 8002780:	080028c5 	.word	0x080028c5
 8002784:	080028c5 	.word	0x080028c5
 8002788:	0800283b 	.word	0x0800283b
 800278c:	080028c5 	.word	0x080028c5
 8002790:	080028c5 	.word	0x080028c5
 8002794:	080028c5 	.word	0x080028c5
 8002798:	080028c5 	.word	0x080028c5
 800279c:	080028c5 	.word	0x080028c5
 80027a0:	080028c5 	.word	0x080028c5
 80027a4:	080028c5 	.word	0x080028c5
 80027a8:	080027ad 	.word	0x080027ad
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8084 	beq.w	80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0c5b      	lsrs	r3, r3, #17
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	4a3f      	ldr	r2, [pc, #252]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027f2:	4a3c      	ldr	r2, [pc, #240]	; (80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	e004      	b.n	800280e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4a38      	ldr	r2, [pc, #224]	; (80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281a:	d102      	bne.n	8002822 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002820:	e052      	b.n	80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4a31      	ldr	r2, [pc, #196]	; (80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
      break;
 8002830:	e04a      	b.n	80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002832:	f7ff fdfb 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002836:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002838:	e049      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800283a:	f7ff fdf7 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800283e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002840:	e045      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002842:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d108      	bne.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	e01f      	b.n	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d109      	bne.n	8002886 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800287e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e00f      	b.n	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002890:	d11c      	bne.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800289e:	f24f 4324 	movw	r3, #62500	; 0xf424
 80028a2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80028a4:	e012      	b.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80028a6:	e011      	b.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80028a8:	f7ff fe32 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	0b9b      	lsrs	r3, r3, #14
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	3301      	adds	r3, #1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	61bb      	str	r3, [r7, #24]
      break;
 80028c2:	e004      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80028c4:	bf00      	nop
 80028c6:	e002      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80028c8:	bf00      	nop
 80028ca:	e000      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80028cc:	bf00      	nop
    }
  }
  return (frequency);
 80028ce:	69bb      	ldr	r3, [r7, #24]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08007c98 	.word	0x08007c98
 80028e0:	08007ca8 	.word	0x08007ca8
 80028e4:	007a1200 	.word	0x007a1200
 80028e8:	003d0900 	.word	0x003d0900
 80028ec:	aaaaaaab 	.word	0xaaaaaaab

080028f0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07a      	b.n	80029fc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7c5b      	ldrb	r3, [r3, #17]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe f86a 	bl	80009f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f870 	bl	8002a08 <HAL_RTC_WaitForSynchro>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e061      	b.n	80029fc <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f892 	bl	8002a62 <RTC_EnterInitMode>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2204      	movs	r2, #4
 8002948:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e056      	b.n	80029fc <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0207 	bic.w	r2, r2, #7
 800295c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RTC_Init+0x114>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_RTC_Init+0x114>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RTC_Init+0x114>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4921      	ldr	r1, [pc, #132]	; (8002a04 <HAL_RTC_Init+0x114>)
 8002980:	4313      	orrs	r3, r2
 8002982:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d003      	beq.n	8002996 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e00e      	b.n	80029b4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff fed2 	bl	8002740 <HAL_RCCEx_GetPeriphCLKFreq>
 800299c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e026      	b.n	80029fc <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0c1a      	lsrs	r2, r3, #16
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 020f 	and.w	r2, r2, #15
 80029c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	b292      	uxth	r2, r2
 80029ca:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f870 	bl	8002ab2 <RTC_ExitInitMode>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2204      	movs	r2, #4
 80029dc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00c      	b.n	80029fc <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
  }
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40006c00 	.word	0x40006c00

08002a08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e01d      	b.n	8002a5a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0208 	bic.w	r2, r2, #8
 8002a2c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002a2e:	f7fe fa51 	bl	8000ed4 <HAL_GetTick>
 8002a32:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002a34:	e009      	b.n	8002a4a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a36:	f7fe fa4d 	bl	8000ed4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a44:	d901      	bls.n	8002a4a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e007      	b.n	8002a5a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ee      	beq.n	8002a36 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002a6e:	f7fe fa31 	bl	8000ed4 <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a74:	e009      	b.n	8002a8a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a76:	f7fe fa2d 	bl	8000ed4 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a84:	d901      	bls.n	8002a8a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e00f      	b.n	8002aaa <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ee      	beq.n	8002a76 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0210 	orr.w	r2, r2, #16
 8002aa6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0210 	bic.w	r2, r2, #16
 8002acc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ace:	f7fe fa01 	bl	8000ed4 <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ad4:	e009      	b.n	8002aea <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ad6:	f7fe f9fd 	bl	8000ed4 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ae4:	d901      	bls.n	8002aea <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e007      	b.n	8002afa <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ee      	beq.n	8002ad6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e041      	b.n	8002b98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f839 	bl	8002ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 f9c3 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e044      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_TIM_Base_Start_IT+0xac>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <HAL_TIM_Base_Start_IT+0xb8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d010      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e007      	b.n	8002c54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40013400 	.word	0x40013400
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8ed 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8e0 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8ef 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0204 	mvn.w	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8c3 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8b6 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f8c5 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0208 	mvn.w	r2, #8
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f899 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f88c 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f89b 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0210 	mvn.w	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f86f 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f862 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f871 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fdbc 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8d7 	bl	8002fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f835 	bl	8002eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0220 	mvn.w	r2, #32
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8a2 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a33      	ldr	r2, [pc, #204]	; (8002fac <TIM_Base_SetConfig+0xe0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a32      	ldr	r2, [pc, #200]	; (8002fb0 <TIM_Base_SetConfig+0xe4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a2f      	ldr	r2, [pc, #188]	; (8002fb4 <TIM_Base_SetConfig+0xe8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a2e      	ldr	r2, [pc, #184]	; (8002fb8 <TIM_Base_SetConfig+0xec>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <TIM_Base_SetConfig+0xf0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <TIM_Base_SetConfig+0xe0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <TIM_Base_SetConfig+0x82>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <TIM_Base_SetConfig+0xe4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00f      	beq.n	8002f4e <TIM_Base_SetConfig+0x82>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d00b      	beq.n	8002f4e <TIM_Base_SetConfig+0x82>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <TIM_Base_SetConfig+0xe8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_Base_SetConfig+0x82>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <TIM_Base_SetConfig+0xec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_Base_SetConfig+0x82>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <TIM_Base_SetConfig+0xf0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d108      	bne.n	8002f60 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <TIM_Base_SetConfig+0xe0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0xc8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <TIM_Base_SetConfig+0xe4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d103      	bne.n	8002f9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	615a      	str	r2, [r3, #20]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40013400 	.word	0x40013400
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e042      	b.n	800307c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fd14 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 ff2f 	bl	8003e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b20      	cmp	r3, #32
 800309c:	d156      	bne.n	800314c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_UART_Transmit_DMA+0x26>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e04f      	b.n	800314e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	; 0x21
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_UART_Transmit_DMA+0xd4>)
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_UART_Transmit_DMA+0xd8>)
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_UART_Transmit_DMA+0xdc>)
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	2200      	movs	r2, #0
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	461a      	mov	r2, r3
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f7fe f845 	bl	8001194 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003112:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3314      	adds	r3, #20
 800311a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	617b      	str	r3, [r7, #20]
   return(result);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003134:	627a      	str	r2, [r7, #36]	; 0x24
 8003136:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	61fb      	str	r3, [r7, #28]
   return(result);
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e5      	bne.n	8003114 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3730      	adds	r7, #48	; 0x30
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	08003721 	.word	0x08003721
 800315c:	080037bb 	.word	0x080037bb
 8003160:	0800393f 	.word	0x0800393f

08003164 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d112      	bne.n	80031a4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_Receive_DMA+0x26>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00b      	b.n	80031a6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fc1a 	bl	80039d4 <UART_Start_Receive_DMA>
 80031a0:	4603      	mov	r3, r0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0ba      	sub	sp, #232	; 0xe8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_UART_IRQHandler+0x66>
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fd7e 	bl	8003d10 <UART_Receive_IT>
      return;
 8003214:	e25b      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80de 	beq.w	80033dc <HAL_UART_IRQHandler+0x22c>
 8003220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003230:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80d1 	beq.w	80033dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_UART_IRQHandler+0xae>
 8003246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_UART_IRQHandler+0xd2>
 800326a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f043 0202 	orr.w	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_UART_IRQHandler+0xf6>
 800328e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d011      	beq.n	80032d6 <HAL_UART_IRQHandler+0x126>
 80032b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 81f2 	beq.w	80036c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_UART_IRQHandler+0x14e>
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fd09 	bl	8003d10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_UART_IRQHandler+0x17a>
 8003322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04f      	beq.n	80033ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fc13 	bl	8003b56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d041      	beq.n	80033c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800336a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800336e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1d9      	bne.n	800333e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d013      	beq.n	80033ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	4a7e      	ldr	r2, [pc, #504]	; (8003590 <HAL_UART_IRQHandler+0x3e0>)
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd ff94 	bl	80012cc <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00e      	b.n	80033d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f99c 	bl	80036f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e00a      	b.n	80033d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f998 	bl	80036f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e006      	b.n	80033d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f994 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80033d6:	e175      	b.n	80036c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	bf00      	nop
    return;
 80033da:	e173      	b.n	80036c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 814f 	bne.w	8003684 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8148 	beq.w	8003684 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8141 	beq.w	8003684 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80b6 	beq.w	8003594 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8145 	beq.w	80036c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003446:	429a      	cmp	r2, r3
 8003448:	f080 813e 	bcs.w	80036c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003452:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b20      	cmp	r3, #32
 800345c:	f000 8088 	beq.w	8003570 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800347a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800348c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003498:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1d9      	bne.n	8003460 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e1      	bne.n	80034ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800350c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003512:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800351a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	f023 0310 	bic.w	r3, r3, #16
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003552:	65ba      	str	r2, [r7, #88]	; 0x58
 8003554:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e3      	bne.n	800352e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fe72 	bl	8001254 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800357e:	b29b      	uxth	r3, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8bf 	bl	800370a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800358c:	e09c      	b.n	80036c8 <HAL_UART_IRQHandler+0x518>
 800358e:	bf00      	nop
 8003590:	08003c1b 	.word	0x08003c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 808e 	beq.w	80036cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8089 	beq.w	80036cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035de:	647a      	str	r2, [r7, #68]	; 0x44
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e3      	bne.n	80035ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3314      	adds	r3, #20
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	623b      	str	r3, [r7, #32]
   return(result);
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3314      	adds	r3, #20
 8003612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003616:	633a      	str	r2, [r7, #48]	; 0x30
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e3      	bne.n	80035f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	60fb      	str	r3, [r7, #12]
   return(result);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0310 	bic.w	r3, r3, #16
 800364e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800365c:	61fa      	str	r2, [r7, #28]
 800365e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	617b      	str	r3, [r7, #20]
   return(result);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e3      	bne.n	8003638 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f844 	bl	800370a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003682:	e023      	b.n	80036cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <HAL_UART_IRQHandler+0x4f4>
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fad0 	bl	8003c42 <UART_Transmit_IT>
    return;
 80036a2:	e014      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_UART_IRQHandler+0x51e>
 80036b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb0f 	bl	8003ce0 <UART_EndTransmit_IT>
    return;
 80036c2:	e004      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
    return;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
      return;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
      return;
 80036cc:	bf00      	nop
  }
}
 80036ce:	37e8      	adds	r7, #232	; 0xe8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b090      	sub	sp, #64	; 0x40
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d137      	bne.n	80037ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373e:	2200      	movs	r2, #0
 8003740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	623b      	str	r3, [r7, #32]
   return(result);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003758:	63bb      	str	r3, [r7, #56]	; 0x38
 800375a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003762:	633a      	str	r2, [r7, #48]	; 0x30
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	60fb      	str	r3, [r7, #12]
   return(result);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003796:	61fa      	str	r2, [r7, #28]
 8003798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	69b9      	ldr	r1, [r7, #24]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	617b      	str	r3, [r7, #20]
   return(result);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037aa:	e002      	b.n	80037b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037ae:	f7fc ff59 	bl	8000664 <HAL_UART_TxCpltCallback>
}
 80037b2:	bf00      	nop
 80037b4:	3740      	adds	r7, #64	; 0x40
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff83 	bl	80036d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b09c      	sub	sp, #112	; 0x70
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d172      	bne.n	80038d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	2200      	movs	r2, #0
 80037f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003818:	65ba      	str	r2, [r7, #88]	; 0x58
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800381e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3314      	adds	r3, #20
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	667b      	str	r3, [r7, #100]	; 0x64
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800384c:	647a      	str	r2, [r7, #68]	; 0x44
 800384e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	623b      	str	r3, [r7, #32]
   return(result);
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003876:	663b      	str	r3, [r7, #96]	; 0x60
 8003878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003880:	633a      	str	r2, [r7, #48]	; 0x30
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d119      	bne.n	80038d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0310 	bic.w	r3, r3, #16
 80038ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038c4:	61fa      	str	r2, [r7, #28]
 80038c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	617b      	str	r3, [r7, #20]
   return(result);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	2200      	movs	r2, #0
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d106      	bne.n	80038f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ea:	4619      	mov	r1, r3
 80038ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80038ee:	f7ff ff0c 	bl	800370a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038f2:	e002      	b.n	80038fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80038f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80038f6:	f7fc feac 	bl	8000652 <HAL_UART_RxCpltCallback>
}
 80038fa:	bf00      	nop
 80038fc:	3770      	adds	r7, #112	; 0x70
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	2b01      	cmp	r3, #1
 800391c:	d108      	bne.n	8003930 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff feee 	bl	800370a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800392e:	e002      	b.n	8003936 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fed8 	bl	80036e6 <HAL_UART_RxHalfCpltCallback>
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b21      	cmp	r3, #33	; 0x21
 8003970:	d108      	bne.n	8003984 <UART_DMAError+0x46>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800397e:	68b8      	ldr	r0, [r7, #8]
 8003980:	f000 f8c2 	bl	8003b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	d108      	bne.n	80039b8 <UART_DMAError+0x7a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80039b2:	68b8      	ldr	r0, [r7, #8]
 80039b4:	f000 f8cf 	bl	8003b56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039c4:	68b8      	ldr	r0, [r7, #8]
 80039c6:	f7ff fe97 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b098      	sub	sp, #96	; 0x60
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2222      	movs	r2, #34	; 0x22
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	4a3e      	ldr	r2, [pc, #248]	; (8003afc <UART_Start_Receive_DMA+0x128>)
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	4a3d      	ldr	r2, [pc, #244]	; (8003b00 <UART_Start_Receive_DMA+0x12c>)
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <UART_Start_Receive_DMA+0x130>)
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	f7fd fbae 	bl	8001194 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d019      	beq.n	8003a8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e5      	bne.n	8003a56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003aaa:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ade:	627a      	str	r2, [r7, #36]	; 0x24
 8003ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6a39      	ldr	r1, [r7, #32]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3760      	adds	r7, #96	; 0x60
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	080037d7 	.word	0x080037d7
 8003b00:	08003903 	.word	0x08003903
 8003b04:	0800393f 	.word	0x0800393f

08003b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	61ba      	str	r2, [r7, #24]
 8003b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e5      	bne.n	8003b10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003b4c:	bf00      	nop
 8003b4e:	3724      	adds	r7, #36	; 0x24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b095      	sub	sp, #84	; 0x54
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b7e:	643a      	str	r2, [r7, #64]	; 0x40
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d119      	bne.n	8003c02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0310 	bic.w	r3, r3, #16
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bee:	61ba      	str	r2, [r7, #24]
 8003bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6979      	ldr	r1, [r7, #20]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e5      	bne.n	8003bce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c10:	bf00      	nop
 8003c12:	3754      	adds	r7, #84	; 0x54
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff fd5f 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b21      	cmp	r3, #33	; 0x21
 8003c54:	d13e      	bne.n	8003cd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d114      	bne.n	8003c8a <UART_Transmit_IT+0x48>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d110      	bne.n	8003c8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]
 8003c88:	e008      	b.n	8003c9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6211      	str	r1, [r2, #32]
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fc fcaf 	bl	8000664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	; 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b22      	cmp	r3, #34	; 0x22
 8003d22:	f040 80ae 	bne.w	8003e82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	d117      	bne.n	8003d60 <UART_Receive_IT+0x50>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d113      	bne.n	8003d60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d5e:	e026      	b.n	8003dae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d007      	beq.n	8003d84 <UART_Receive_IT+0x74>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <UART_Receive_IT+0x82>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e008      	b.n	8003da4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d15d      	bne.n	8003e7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0220 	bic.w	r2, r2, #32
 8003dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d135      	bne.n	8003e74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f023 0310 	bic.w	r3, r3, #16
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2e:	623a      	str	r2, [r7, #32]
 8003e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	69f9      	ldr	r1, [r7, #28]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d10a      	bne.n	8003e66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fc4c 	bl	800370a <HAL_UARTEx_RxEventCallback>
 8003e72:	e002      	b.n	8003e7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fc fbec 	bl	8000652 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e002      	b.n	8003e84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3730      	adds	r7, #48	; 0x30
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ec6:	f023 030c 	bic.w	r3, r3, #12
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <UART_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d103      	bne.n	8003efc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe fb0c 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe faf4 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003f00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009a      	lsls	r2, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <UART_SetConfig+0x118>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	0119      	lsls	r1, r3, #4
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009a      	lsls	r2, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <UART_SetConfig+0x118>)
 8003f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	2064      	movs	r0, #100	; 0x64
 8003f42:	fb00 f303 	mul.w	r3, r0, r3
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	3332      	adds	r3, #50	; 0x32
 8003f4c:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <UART_SetConfig+0x118>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f58:	4419      	add	r1, r3
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009a      	lsls	r2, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <UART_SetConfig+0x118>)
 8003f72:	fba3 0302 	umull	r0, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2064      	movs	r0, #100	; 0x64
 8003f7a:	fb00 f303 	mul.w	r3, r0, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	3332      	adds	r3, #50	; 0x32
 8003f84:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <UART_SetConfig+0x118>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 020f 	and.w	r2, r3, #15
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	440a      	add	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	51eb851f 	.word	0x51eb851f

08003fa8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fae:	f3ef 8305 	mrs	r3, IPSR
 8003fb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	607b      	str	r3, [r7, #4]
  return(result);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <osKernelInitialize+0x32>
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <osKernelInitialize+0x60>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d109      	bne.n	8003fe2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fce:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003fda:	f06f 0305 	mvn.w	r3, #5
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e00c      	b.n	8003ffc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <osKernelInitialize+0x60>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <osKernelInitialize+0x60>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e002      	b.n	8003ffc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	200009e4 	.word	0x200009e4

0800400c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004012:	f3ef 8305 	mrs	r3, IPSR
 8004016:	60bb      	str	r3, [r7, #8]
  return(result);
 8004018:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401e:	f3ef 8310 	mrs	r3, PRIMASK
 8004022:	607b      	str	r3, [r7, #4]
  return(result);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <osKernelStart+0x32>
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <osKernelStart+0x64>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d109      	bne.n	8004046 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004032:	f3ef 8311 	mrs	r3, BASEPRI
 8004036:	603b      	str	r3, [r7, #0]
  return(result);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <osKernelStart+0x3a>
    stat = osErrorISR;
 800403e:	f06f 0305 	mvn.w	r3, #5
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e00e      	b.n	8004064 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <osKernelStart+0x64>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <osKernelStart+0x64>)
 8004050:	2202      	movs	r2, #2
 8004052:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004054:	f001 f890 	bl	8005178 <vTaskStartScheduler>
      stat = osOK;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e002      	b.n	8004064 <osKernelStart+0x58>
    } else {
      stat = osError;
 800405e:	f04f 33ff 	mov.w	r3, #4294967295
 8004062:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004064:	68fb      	ldr	r3, [r7, #12]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200009e4 	.word	0x200009e4

08004074 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b092      	sub	sp, #72	; 0x48
 8004078:	af04      	add	r7, sp, #16
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004084:	f3ef 8305 	mrs	r3, IPSR
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 8094 	bne.w	80041ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004092:	f3ef 8310 	mrs	r3, PRIMASK
 8004096:	623b      	str	r3, [r7, #32]
  return(result);
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 808d 	bne.w	80041ba <osThreadNew+0x146>
 80040a0:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <osThreadNew+0x150>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d106      	bne.n	80040b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040a8:	f3ef 8311 	mrs	r3, BASEPRI
 80040ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 8082 	bne.w	80041ba <osThreadNew+0x146>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d07e      	beq.n	80041ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80040c0:	2318      	movs	r3, #24
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80040c4:	2300      	movs	r3, #0
 80040c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80040c8:	f107 031b 	add.w	r3, r7, #27
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d045      	beq.n	8004166 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <osThreadNew+0x74>
        name = attr->name;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <osThreadNew+0x9a>
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	2b38      	cmp	r3, #56	; 0x38
 8004100:	d805      	bhi.n	800410e <osThreadNew+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <osThreadNew+0x9e>
        return (NULL);
 800410e:	2300      	movs	r3, #0
 8004110:	e054      	b.n	80041bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00e      	beq.n	8004148 <osThreadNew+0xd4>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2ba7      	cmp	r3, #167	; 0xa7
 8004130:	d90a      	bls.n	8004148 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <osThreadNew+0xd4>
        mem = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	e010      	b.n	800416a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10c      	bne.n	800416a <osThreadNew+0xf6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <osThreadNew+0xf6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <osThreadNew+0xf6>
          mem = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
 8004164:	e001      	b.n	800416a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	2b01      	cmp	r3, #1
 800416e:	d110      	bne.n	8004192 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004178:	9202      	str	r2, [sp, #8]
 800417a:	9301      	str	r3, [sp, #4]
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fe12 	bl	8004db0 <xTaskCreateStatic>
 800418c:	4603      	mov	r3, r0
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e013      	b.n	80041ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d110      	bne.n	80041ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	b29a      	uxth	r2, r3
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fe5c 	bl	8004e68 <xTaskCreate>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <osThreadNew+0x146>
          hTask = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041ba:	697b      	ldr	r3, [r7, #20]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3738      	adds	r7, #56	; 0x38
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200009e4 	.word	0x200009e4

080041c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d0:	f3ef 8305 	mrs	r3, IPSR
 80041d4:	613b      	str	r3, [r7, #16]
  return(result);
 80041d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10f      	bne.n	80041fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041dc:	f3ef 8310 	mrs	r3, PRIMASK
 80041e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <osDelay+0x34>
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <osDelay+0x58>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d109      	bne.n	8004204 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f0:	f3ef 8311 	mrs	r3, BASEPRI
 80041f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <osDelay+0x3c>
    stat = osErrorISR;
 80041fc:	f06f 0305 	mvn.w	r3, #5
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e007      	b.n	8004214 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <osDelay+0x4c>
      vTaskDelay(ticks);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 ff7e 	bl	8005110 <vTaskDelay>
    }
  }

  return (stat);
 8004214:	697b      	ldr	r3, [r7, #20]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200009e4 	.word	0x200009e4

08004224 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a06      	ldr	r2, [pc, #24]	; (800424c <vApplicationGetIdleTaskMemory+0x28>)
 8004234:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4a05      	ldr	r2, [pc, #20]	; (8004250 <vApplicationGetIdleTaskMemory+0x2c>)
 800423a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	601a      	str	r2, [r3, #0]
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	200009e8 	.word	0x200009e8
 8004250:	20000a90 	.word	0x20000a90

08004254 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <vApplicationGetTimerTaskMemory+0x2c>)
 8004264:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a06      	ldr	r2, [pc, #24]	; (8004284 <vApplicationGetTimerTaskMemory+0x30>)
 800426a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004272:	601a      	str	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000c90 	.word	0x20000c90
 8004284:	20000d38 	.word	0x20000d38

08004288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f103 0208 	add.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f103 0208 	add.w	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f103 0208 	add.w	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d103      	bne.n	8004344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e00c      	b.n	800435e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3308      	adds	r3, #8
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e002      	b.n	8004352 <vListInsert+0x2e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d2f6      	bcs.n	800434c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6892      	ldr	r2, [r2, #8]
 80043aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6852      	ldr	r2, [r2, #4]
 80043b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d103      	bne.n	80043c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	1e5a      	subs	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
	...

080043e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004412:	f001 fff3 	bl	80063fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	441a      	add	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	3b01      	subs	r3, #1
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d114      	bne.n	8004492 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01a      	beq.n	80044a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3310      	adds	r3, #16
 8004474:	4618      	mov	r0, r3
 8004476:	f001 f91b 	bl	80056b0 <xTaskRemoveFromEventList>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <xQueueGenericReset+0xcc>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	e009      	b.n	80044a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3310      	adds	r3, #16
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fef6 	bl	8004288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3324      	adds	r3, #36	; 0x24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fef1 	bl	8004288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044a6:	f001 ffd9 	bl	800645c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08e      	sub	sp, #56	; 0x38
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <xQueueGenericCreateStatic+0x52>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <xQueueGenericCreateStatic+0x56>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericCreateStatic+0x58>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xQueueGenericCreateStatic+0x7e>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <xQueueGenericCreateStatic+0x82>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueGenericCreateStatic+0x84>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	61fb      	str	r3, [r7, #28]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004556:	2350      	movs	r3, #80	; 0x50
 8004558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d00a      	beq.n	8004576 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	61bb      	str	r3, [r7, #24]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004588:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f805 	bl	80045a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3730      	adds	r7, #48	; 0x30
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045d4:	2101      	movs	r1, #1
 80045d6:	69b8      	ldr	r0, [r7, #24]
 80045d8:	f7ff ff06 	bl	80043e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericSend+0x32>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <xQueueGenericSend+0x40>
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <xQueueGenericSend+0x44>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <xQueueGenericSend+0x46>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xQueueGenericSend+0x60>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d103      	bne.n	800465a <xQueueGenericSend+0x6e>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <xQueueGenericSend+0x72>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericSend+0x74>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericSend+0x8e>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800467a:	f001 f9df 	bl	8005a3c <xTaskGetSchedulerState>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <xQueueGenericSend+0x9e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <xQueueGenericSend+0xa2>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <xQueueGenericSend+0xa4>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xQueueGenericSend+0xbe>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	61fb      	str	r3, [r7, #28]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046aa:	f001 fea7 	bl	80063fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <xQueueGenericSend+0xd4>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d129      	bne.n	8004714 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c6:	f000 fa07 	bl	8004ad8 <prvCopyDataToQueue>
 80046ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ffe9 	bl	80056b0 <xTaskRemoveFromEventList>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046e4:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <xQueueGenericSend+0x1f8>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	e00a      	b.n	800470c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <xQueueGenericSend+0x1f8>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800470c:	f001 fea6 	bl	800645c <vPortExitCritical>
				return pdPASS;
 8004710:	2301      	movs	r3, #1
 8004712:	e063      	b.n	80047dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471a:	f001 fe9f 	bl	800645c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800471e:	2300      	movs	r3, #0
 8004720:	e05c      	b.n	80047dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	4618      	mov	r0, r3
 800472e:	f001 f823 	bl	8005778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004736:	f001 fe91 	bl	800645c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473a:	f000 fd8d 	bl	8005258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800473e:	f001 fe5d 	bl	80063fc <vPortEnterCritical>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004748:	b25b      	sxtb	r3, r3
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d103      	bne.n	8004758 <xQueueGenericSend+0x16c>
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475e:	b25b      	sxtb	r3, r3
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d103      	bne.n	800476e <xQueueGenericSend+0x182>
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476e:	f001 fe75 	bl	800645c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004772:	1d3a      	adds	r2, r7, #4
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f001 f812 	bl	80057a4 <xTaskCheckForTimeOut>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d124      	bne.n	80047d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004788:	f000 fa9e 	bl	8004cc8 <prvIsQueueFull>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	3310      	adds	r3, #16
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 ff38 	bl	8005610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a2:	f000 fa29 	bl	8004bf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047a6:	f000 fd65 	bl	8005274 <xTaskResumeAll>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f af7c 	bne.w	80046aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <xQueueGenericSend+0x1f8>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	e772      	b.n	80046aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c6:	f000 fa17 	bl	8004bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ca:	f000 fd53 	bl	8005274 <xTaskResumeAll>
 80047ce:	e76c      	b.n	80046aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d2:	f000 fa11 	bl	8004bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d6:	f000 fd4d 	bl	8005274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047da:	2300      	movs	r3, #0
		}
	}
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	; 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08e      	sub	sp, #56	; 0x38
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <xQueueGenericSendFromISR+0x3c>
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <xQueueGenericSendFromISR+0x40>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <xQueueGenericSendFromISR+0x42>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	623b      	str	r3, [r7, #32]
}
 8004840:	bf00      	nop
 8004842:	e7fe      	b.n	8004842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d103      	bne.n	8004852 <xQueueGenericSendFromISR+0x6a>
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <xQueueGenericSendFromISR+0x6e>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <xQueueGenericSendFromISR+0x70>
 8004856:	2300      	movs	r3, #0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	61fb      	str	r3, [r7, #28]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004872:	f001 fe85 	bl	8006580 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004876:	f3ef 8211 	mrs	r2, BASEPRI
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	61ba      	str	r2, [r7, #24]
 800488c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800488e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <xQueueGenericSendFromISR+0xbc>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d12c      	bne.n	80048fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b4:	f000 f910 	bl	8004ad8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d112      	bne.n	80048e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	3324      	adds	r3, #36	; 0x24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 feee 	bl	80056b0 <xTaskRemoveFromEventList>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e007      	b.n	80048f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048ec:	3301      	adds	r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	b25a      	sxtb	r2, r3
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048f8:	2301      	movs	r3, #1
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048fc:	e001      	b.n	8004902 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800490c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004910:	4618      	mov	r0, r3
 8004912:	3738      	adds	r7, #56	; 0x38
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <xQueueReceive+0x30>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	623b      	str	r3, [r7, #32]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <xQueueReceive+0x3e>
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <xQueueReceive+0x42>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueReceive+0x44>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueReceive+0x5e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	61fb      	str	r3, [r7, #28]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004976:	f001 f861 	bl	8005a3c <xTaskGetSchedulerState>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <xQueueReceive+0x6e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <xQueueReceive+0x72>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueReceive+0x74>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueReceive+0x8e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61bb      	str	r3, [r7, #24]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049a6:	f001 fd29 	bl	80063fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01f      	beq.n	80049f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f000 f8f7 	bl	8004bac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00f      	beq.n	80049ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fe6c 	bl	80056b0 <xTaskRemoveFromEventList>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <xQueueReceive+0x1bc>)
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049ee:	f001 fd35 	bl	800645c <vPortExitCritical>
				return pdPASS;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e069      	b.n	8004aca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049fc:	f001 fd2e 	bl	800645c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e062      	b.n	8004aca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a0a:	f107 0310 	add.w	r3, r7, #16
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 feb2 	bl	8005778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a18:	f001 fd20 	bl	800645c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a1c:	f000 fc1c 	bl	8005258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a20:	f001 fcec 	bl	80063fc <vPortEnterCritical>
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d103      	bne.n	8004a3a <xQueueReceive+0x122>
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d103      	bne.n	8004a50 <xQueueReceive+0x138>
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a50:	f001 fd04 	bl	800645c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a54:	1d3a      	adds	r2, r7, #4
 8004a56:	f107 0310 	add.w	r3, r7, #16
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fea1 	bl	80057a4 <xTaskCheckForTimeOut>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d123      	bne.n	8004ab0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6a:	f000 f917 	bl	8004c9c <prvIsQueueEmpty>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d017      	beq.n	8004aa4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	3324      	adds	r3, #36	; 0x24
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fdc7 	bl	8005610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a84:	f000 f8b8 	bl	8004bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a88:	f000 fbf4 	bl	8005274 <xTaskResumeAll>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d189      	bne.n	80049a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <xQueueReceive+0x1bc>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	e780      	b.n	80049a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa6:	f000 f8a7 	bl	8004bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aaa:	f000 fbe3 	bl	8005274 <xTaskResumeAll>
 8004aae:	e77a      	b.n	80049a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab2:	f000 f8a1 	bl	8004bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab6:	f000 fbdd 	bl	8005274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abc:	f000 f8ee 	bl	8004c9c <prvIsQueueEmpty>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f43f af6f 	beq.w	80049a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3730      	adds	r7, #48	; 0x30
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d14d      	bne.n	8004b9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ffb8 	bl	8005a78 <xTaskPriorityDisinherit>
 8004b08:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	e043      	b.n	8004b9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d119      	bne.n	8004b4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6898      	ldr	r0, [r3, #8]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	461a      	mov	r2, r3
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	f002 fdf8 	bl	8007718 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d32b      	bcc.n	8004b9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	e026      	b.n	8004b9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68d8      	ldr	r0, [r3, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	461a      	mov	r2, r3
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	f002 fdde 	bl	8007718 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	425b      	negs	r3, r3
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d207      	bcs.n	8004b88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	425b      	negs	r3, r3
 8004b82:	441a      	add	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d105      	bne.n	8004b9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ba2:	697b      	ldr	r3, [r7, #20]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d303      	bcc.n	8004be0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68d9      	ldr	r1, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	461a      	mov	r2, r3
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	f002 fd94 	bl	8007718 <memcpy>
	}
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c00:	f001 fbfc 	bl	80063fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c0c:	e011      	b.n	8004c32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d012      	beq.n	8004c3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3324      	adds	r3, #36	; 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fd48 	bl	80056b0 <xTaskRemoveFromEventList>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c26:	f000 fe1f 	bl	8005868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dce9      	bgt.n	8004c0e <prvUnlockQueue+0x16>
 8004c3a:	e000      	b.n	8004c3e <prvUnlockQueue+0x46>
					break;
 8004c3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	22ff      	movs	r2, #255	; 0xff
 8004c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c46:	f001 fc09 	bl	800645c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c4a:	f001 fbd7 	bl	80063fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c56:	e011      	b.n	8004c7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3310      	adds	r3, #16
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd23 	bl	80056b0 <xTaskRemoveFromEventList>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c70:	f000 fdfa 	bl	8005868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dce9      	bgt.n	8004c58 <prvUnlockQueue+0x60>
 8004c84:	e000      	b.n	8004c88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c90:	f001 fbe4 	bl	800645c <vPortExitCritical>
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ca4:	f001 fbaa 	bl	80063fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e001      	b.n	8004cba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cba:	f001 fbcf 	bl	800645c <vPortExitCritical>

	return xReturn;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cd0:	f001 fb94 	bl	80063fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d102      	bne.n	8004ce6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e001      	b.n	8004cea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f001 fbb7 	bl	800645c <vPortExitCritical>

	return xReturn;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e014      	b.n	8004d32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d08:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <vQueueAddToRegistry+0x4c>)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d14:	490b      	ldr	r1, [pc, #44]	; (8004d44 <vQueueAddToRegistry+0x4c>)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <vQueueAddToRegistry+0x4c>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d2a:	e006      	b.n	8004d3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b07      	cmp	r3, #7
 8004d36:	d9e7      	bls.n	8004d08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	20001138 	.word	0x20001138

08004d48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d58:	f001 fb50 	bl	80063fc <vPortEnterCritical>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d103      	bne.n	8004d72 <vQueueWaitForMessageRestricted+0x2a>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d78:	b25b      	sxtb	r3, r3
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d103      	bne.n	8004d88 <vQueueWaitForMessageRestricted+0x40>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d88:	f001 fb68 	bl	800645c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3324      	adds	r3, #36	; 0x24
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fc5b 	bl	8005658 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	f7ff ff28 	bl	8004bf8 <prvUnlockQueue>
	}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08e      	sub	sp, #56	; 0x38
 8004db4:	af04      	add	r7, sp, #16
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTaskCreateStatic+0x2a>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61fb      	str	r3, [r7, #28]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004df6:	23a8      	movs	r3, #168	; 0xa8
 8004df8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2ba8      	cmp	r3, #168	; 0xa8
 8004dfe:	d00a      	beq.n	8004e16 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	61bb      	str	r3, [r7, #24]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01e      	beq.n	8004e5a <xTaskCreateStatic+0xaa>
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01b      	beq.n	8004e5a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e34:	2300      	movs	r3, #0
 8004e36:	9303      	str	r3, [sp, #12]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	9302      	str	r3, [sp, #8]
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f851 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e54:	f000 f8ec 	bl	8005030 <prvAddNewTaskToReadyList>
 8004e58:	e001      	b.n	8004e5e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e5e:	697b      	ldr	r3, [r7, #20]
	}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	; 0x30
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 fbbd 	bl	80065fc <pvPortMalloc>
 8004e82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e8a:	20a8      	movs	r0, #168	; 0xa8
 8004e8c:	f001 fbb6 	bl	80065fc <pvPortMalloc>
 8004e90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e9e:	e005      	b.n	8004eac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f001 fc6f 	bl	8006784 <vPortFree>
 8004ea6:	e001      	b.n	8004eac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d017      	beq.n	8004ee2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9303      	str	r3, [sp, #12]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f80f 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed6:	69f8      	ldr	r0, [r7, #28]
 8004ed8:	f000 f8aa 	bl	8005030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004edc:	2301      	movs	r3, #1
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e002      	b.n	8004ee8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	21a5      	movs	r1, #165	; 0xa5
 8004f0e:	f002 fb25 	bl	800755c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	617b      	str	r3, [r7, #20]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e012      	b.n	8004f78 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	7819      	ldrb	r1, [r3, #0]
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	3334      	adds	r3, #52	; 0x34
 8004f62:	460a      	mov	r2, r1
 8004f64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b0f      	cmp	r3, #15
 8004f7c:	d9e9      	bls.n	8004f52 <prvInitialiseNewTask+0x5e>
 8004f7e:	e000      	b.n	8004f82 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004f80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2b37      	cmp	r3, #55	; 0x37
 8004f8e:	d901      	bls.n	8004f94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f90:	2337      	movs	r3, #55	; 0x37
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff f98b 	bl	80042c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff f986 	bl	80042c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	3354      	adds	r3, #84	; 0x54
 8004fe4:	224c      	movs	r2, #76	; 0x4c
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 fab7 	bl	800755c <memset>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <prvInitialiseNewTask+0x130>)
 8004ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <prvInitialiseNewTask+0x134>)
 8004ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	4a0b      	ldr	r2, [pc, #44]	; (800502c <prvInitialiseNewTask+0x138>)
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	69b8      	ldr	r0, [r7, #24]
 8005006:	f001 f90b 	bl	8006220 <pxPortInitialiseStack>
 800500a:	4602      	mov	r2, r0
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800501c:	bf00      	nop
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	200037c4 	.word	0x200037c4
 8005028:	2000382c 	.word	0x2000382c
 800502c:	20003894 	.word	0x20003894

08005030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005038:	f001 f9e0 	bl	80063fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <prvAddNewTaskToReadyList+0xc4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <prvAddNewTaskToReadyList+0xc4>)
 8005044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005046:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <prvAddNewTaskToReadyList+0xc8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800504e:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <prvAddNewTaskToReadyList+0xc8>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005054:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <prvAddNewTaskToReadyList+0xc4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d110      	bne.n	800507e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800505c:	f000 fc28 	bl	80058b0 <prvInitialiseTaskLists>
 8005060:	e00d      	b.n	800507e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005062:	4b26      	ldr	r3, [pc, #152]	; (80050fc <prvAddNewTaskToReadyList+0xcc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <prvAddNewTaskToReadyList+0xc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d802      	bhi.n	800507e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005078:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <prvAddNewTaskToReadyList+0xc8>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <prvAddNewTaskToReadyList+0xd0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <prvAddNewTaskToReadyList+0xd0>)
 8005086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <prvAddNewTaskToReadyList+0xd0>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <prvAddNewTaskToReadyList+0xd4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d903      	bls.n	80050a4 <prvAddNewTaskToReadyList+0x74>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <prvAddNewTaskToReadyList+0xd4>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <prvAddNewTaskToReadyList+0xd8>)
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7ff f90f 	bl	80042de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050c0:	f001 f9cc 	bl	800645c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <prvAddNewTaskToReadyList+0xcc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00e      	beq.n	80050ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <prvAddNewTaskToReadyList+0xc8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d207      	bcs.n	80050ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <prvAddNewTaskToReadyList+0xdc>)
 80050dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	2000164c 	.word	0x2000164c
 80050f8:	20001178 	.word	0x20001178
 80050fc:	20001658 	.word	0x20001658
 8005100:	20001668 	.word	0x20001668
 8005104:	20001654 	.word	0x20001654
 8005108:	2000117c 	.word	0x2000117c
 800510c:	e000ed04 	.word	0xe000ed04

08005110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <vTaskDelay+0x60>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <vTaskDelay+0x30>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60bb      	str	r3, [r7, #8]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005140:	f000 f88a 	bl	8005258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005144:	2100      	movs	r1, #0
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fd04 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800514c:	f000 f892 	bl	8005274 <xTaskResumeAll>
 8005150:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d107      	bne.n	8005168 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <vTaskDelay+0x64>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20001674 	.word	0x20001674
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005186:	463a      	mov	r2, r7
 8005188:	1d39      	adds	r1, r7, #4
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f848 	bl	8004224 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	9202      	str	r2, [sp, #8]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	2300      	movs	r3, #0
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	460a      	mov	r2, r1
 80051a6:	4924      	ldr	r1, [pc, #144]	; (8005238 <vTaskStartScheduler+0xc0>)
 80051a8:	4824      	ldr	r0, [pc, #144]	; (800523c <vTaskStartScheduler+0xc4>)
 80051aa:	f7ff fe01 	bl	8004db0 <xTaskCreateStatic>
 80051ae:	4603      	mov	r3, r0
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <vTaskStartScheduler+0xc8>)
 80051b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <vTaskStartScheduler+0xc8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051bc:	2301      	movs	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e001      	b.n	80051c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d102      	bne.n	80051d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051cc:	f000 fd16 	bl	8005bfc <xTimerCreateTimerTask>
 80051d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d11b      	bne.n	8005210 <vTaskStartScheduler+0x98>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	613b      	str	r3, [r7, #16]
}
 80051ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <vTaskStartScheduler+0xcc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3354      	adds	r3, #84	; 0x54
 80051f2:	4a15      	ldr	r2, [pc, #84]	; (8005248 <vTaskStartScheduler+0xd0>)
 80051f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <vTaskStartScheduler+0xd4>)
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051fe:	4b14      	ldr	r3, [pc, #80]	; (8005250 <vTaskStartScheduler+0xd8>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <vTaskStartScheduler+0xdc>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800520a:	f001 f885 	bl	8006318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800520e:	e00e      	b.n	800522e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d10a      	bne.n	800522e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	60fb      	str	r3, [r7, #12]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <vTaskStartScheduler+0xb4>
}
 800522e:	bf00      	nop
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08007c0c 	.word	0x08007c0c
 800523c:	08005881 	.word	0x08005881
 8005240:	20001670 	.word	0x20001670
 8005244:	20001178 	.word	0x20001178
 8005248:	20000068 	.word	0x20000068
 800524c:	2000166c 	.word	0x2000166c
 8005250:	20001658 	.word	0x20001658
 8005254:	20001650 	.word	0x20001650

08005258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vTaskSuspendAll+0x18>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a03      	ldr	r2, [pc, #12]	; (8005270 <vTaskSuspendAll+0x18>)
 8005264:	6013      	str	r3, [r2, #0]
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20001674 	.word	0x20001674

08005274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005282:	4b42      	ldr	r3, [pc, #264]	; (800538c <xTaskResumeAll+0x118>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052a0:	f001 f8ac 	bl	80063fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <xTaskResumeAll+0x118>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4a38      	ldr	r2, [pc, #224]	; (800538c <xTaskResumeAll+0x118>)
 80052ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ae:	4b37      	ldr	r3, [pc, #220]	; (800538c <xTaskResumeAll+0x118>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d162      	bne.n	800537c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052b6:	4b36      	ldr	r3, [pc, #216]	; (8005390 <xTaskResumeAll+0x11c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d05e      	beq.n	800537c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052be:	e02f      	b.n	8005320 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052c0:	4b34      	ldr	r3, [pc, #208]	; (8005394 <xTaskResumeAll+0x120>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3318      	adds	r3, #24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff f861 	bl	8004394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f85c 	bl	8004394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4b2d      	ldr	r3, [pc, #180]	; (8005398 <xTaskResumeAll+0x124>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d903      	bls.n	80052f0 <xTaskResumeAll+0x7c>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <xTaskResumeAll+0x124>)
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <xTaskResumeAll+0x128>)
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f7fe ffe9 	bl	80042de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <xTaskResumeAll+0x12c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	429a      	cmp	r2, r3
 8005318:	d302      	bcc.n	8005320 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800531a:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <xTaskResumeAll+0x130>)
 800531c:	2201      	movs	r2, #1
 800531e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <xTaskResumeAll+0x120>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1cb      	bne.n	80052c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800532e:	f000 fb61 	bl	80059f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005332:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <xTaskResumeAll+0x134>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800533e:	f000 f845 	bl	80053cc <xTaskIncrementTick>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <xTaskResumeAll+0x130>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3b01      	subs	r3, #1
 8005352:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f1      	bne.n	800533e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <xTaskResumeAll+0x134>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <xTaskResumeAll+0x130>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <xTaskResumeAll+0x138>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800537c:	f001 f86e 	bl	800645c <vPortExitCritical>

	return xAlreadyYielded;
 8005380:	68bb      	ldr	r3, [r7, #8]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20001674 	.word	0x20001674
 8005390:	2000164c 	.word	0x2000164c
 8005394:	2000160c 	.word	0x2000160c
 8005398:	20001654 	.word	0x20001654
 800539c:	2000117c 	.word	0x2000117c
 80053a0:	20001178 	.word	0x20001178
 80053a4:	20001660 	.word	0x20001660
 80053a8:	2000165c 	.word	0x2000165c
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053b6:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <xTaskGetTickCount+0x18>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053bc:	687b      	ldr	r3, [r7, #4]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	20001650 	.word	0x20001650

080053cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d6:	4b51      	ldr	r3, [pc, #324]	; (800551c <xTaskIncrementTick+0x150>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 808e 	bne.w	80054fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053e0:	4b4f      	ldr	r3, [pc, #316]	; (8005520 <xTaskIncrementTick+0x154>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053e8:	4a4d      	ldr	r2, [pc, #308]	; (8005520 <xTaskIncrementTick+0x154>)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d120      	bne.n	8005436 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053f4:	4b4b      	ldr	r3, [pc, #300]	; (8005524 <xTaskIncrementTick+0x158>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <xTaskIncrementTick+0x48>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	603b      	str	r3, [r7, #0]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <xTaskIncrementTick+0x46>
 8005414:	4b43      	ldr	r3, [pc, #268]	; (8005524 <xTaskIncrementTick+0x158>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	4b43      	ldr	r3, [pc, #268]	; (8005528 <xTaskIncrementTick+0x15c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a41      	ldr	r2, [pc, #260]	; (8005524 <xTaskIncrementTick+0x158>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4a41      	ldr	r2, [pc, #260]	; (8005528 <xTaskIncrementTick+0x15c>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b40      	ldr	r3, [pc, #256]	; (800552c <xTaskIncrementTick+0x160>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	4a3f      	ldr	r2, [pc, #252]	; (800552c <xTaskIncrementTick+0x160>)
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	f000 fadf 	bl	80059f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <xTaskIncrementTick+0x164>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d34e      	bcc.n	80054de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005440:	4b38      	ldr	r3, [pc, #224]	; (8005524 <xTaskIncrementTick+0x158>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xTaskIncrementTick+0x82>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xTaskIncrementTick+0x84>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005454:	4b36      	ldr	r3, [pc, #216]	; (8005530 <xTaskIncrementTick+0x164>)
 8005456:	f04f 32ff 	mov.w	r2, #4294967295
 800545a:	601a      	str	r2, [r3, #0]
					break;
 800545c:	e03f      	b.n	80054de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <xTaskIncrementTick+0x158>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d203      	bcs.n	800547e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005476:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <xTaskIncrementTick+0x164>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6013      	str	r3, [r2, #0]
						break;
 800547c:	e02f      	b.n	80054de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3304      	adds	r3, #4
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe ff86 	bl	8004394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	3318      	adds	r3, #24
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe ff7d 	bl	8004394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549e:	4b25      	ldr	r3, [pc, #148]	; (8005534 <xTaskIncrementTick+0x168>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d903      	bls.n	80054ae <xTaskIncrementTick+0xe2>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	4a22      	ldr	r2, [pc, #136]	; (8005534 <xTaskIncrementTick+0x168>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <xTaskIncrementTick+0x16c>)
 80054bc:	441a      	add	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7fe ff0a 	bl	80042de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <xTaskIncrementTick+0x170>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d3b3      	bcc.n	8005440 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054dc:	e7b0      	b.n	8005440 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054de:	4b17      	ldr	r3, [pc, #92]	; (800553c <xTaskIncrementTick+0x170>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	4914      	ldr	r1, [pc, #80]	; (8005538 <xTaskIncrementTick+0x16c>)
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d907      	bls.n	8005506 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054f6:	2301      	movs	r3, #1
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	e004      	b.n	8005506 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054fc:	4b10      	ldr	r3, [pc, #64]	; (8005540 <xTaskIncrementTick+0x174>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	4a0f      	ldr	r2, [pc, #60]	; (8005540 <xTaskIncrementTick+0x174>)
 8005504:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <xTaskIncrementTick+0x178>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005512:	697b      	ldr	r3, [r7, #20]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20001674 	.word	0x20001674
 8005520:	20001650 	.word	0x20001650
 8005524:	20001604 	.word	0x20001604
 8005528:	20001608 	.word	0x20001608
 800552c:	20001664 	.word	0x20001664
 8005530:	2000166c 	.word	0x2000166c
 8005534:	20001654 	.word	0x20001654
 8005538:	2000117c 	.word	0x2000117c
 800553c:	20001178 	.word	0x20001178
 8005540:	2000165c 	.word	0x2000165c
 8005544:	20001660 	.word	0x20001660

08005548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800554e:	4b2a      	ldr	r3, [pc, #168]	; (80055f8 <vTaskSwitchContext+0xb0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <vTaskSwitchContext+0xb4>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800555c:	e046      	b.n	80055ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800555e:	4b27      	ldr	r3, [pc, #156]	; (80055fc <vTaskSwitchContext+0xb4>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005564:	4b26      	ldr	r3, [pc, #152]	; (8005600 <vTaskSwitchContext+0xb8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e010      	b.n	800558e <vTaskSwitchContext+0x46>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <vTaskSwitchContext+0x40>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	607b      	str	r3, [r7, #4]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vTaskSwitchContext+0x3e>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	491d      	ldr	r1, [pc, #116]	; (8005604 <vTaskSwitchContext+0xbc>)
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0e4      	beq.n	800556c <vTaskSwitchContext+0x24>
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4a15      	ldr	r2, [pc, #84]	; (8005604 <vTaskSwitchContext+0xbc>)
 80055ae:	4413      	add	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3308      	adds	r3, #8
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d104      	bne.n	80055d2 <vTaskSwitchContext+0x8a>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4a0b      	ldr	r2, [pc, #44]	; (8005608 <vTaskSwitchContext+0xc0>)
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4a08      	ldr	r2, [pc, #32]	; (8005600 <vTaskSwitchContext+0xb8>)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <vTaskSwitchContext+0xc0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3354      	adds	r3, #84	; 0x54
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <vTaskSwitchContext+0xc4>)
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20001674 	.word	0x20001674
 80055fc:	20001660 	.word	0x20001660
 8005600:	20001654 	.word	0x20001654
 8005604:	2000117c 	.word	0x2000117c
 8005608:	20001178 	.word	0x20001178
 800560c:	20000068 	.word	0x20000068

08005610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005636:	4b07      	ldr	r3, [pc, #28]	; (8005654 <vTaskPlaceOnEventList+0x44>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3318      	adds	r3, #24
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fe fe70 	bl	8004324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005644:	2101      	movs	r1, #1
 8005646:	6838      	ldr	r0, [r7, #0]
 8005648:	f000 fa84 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20001178 	.word	0x20001178

08005658 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	617b      	str	r3, [r7, #20]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3318      	adds	r3, #24
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7fe fe28 	bl	80042de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005694:	f04f 33ff 	mov.w	r3, #4294967295
 8005698:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	68b8      	ldr	r0, [r7, #8]
 800569e:	f000 fa59 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
	}
 80056a2:	bf00      	nop
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20001178 	.word	0x20001178

080056b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	60fb      	str	r3, [r7, #12]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	3318      	adds	r3, #24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe fe57 	bl	8004394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <xTaskRemoveFromEventList+0xb0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11d      	bne.n	800572a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe fe4e 	bl	8004394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <xTaskRemoveFromEventList+0xb4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d903      	bls.n	800570c <xTaskRemoveFromEventList+0x5c>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <xTaskRemoveFromEventList+0xb4>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <xTaskRemoveFromEventList+0xb8>)
 800571a:	441a      	add	r2, r3
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7fe fddb 	bl	80042de <vListInsertEnd>
 8005728:	e005      	b.n	8005736 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	3318      	adds	r3, #24
 800572e:	4619      	mov	r1, r3
 8005730:	480e      	ldr	r0, [pc, #56]	; (800576c <xTaskRemoveFromEventList+0xbc>)
 8005732:	f7fe fdd4 	bl	80042de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <xTaskRemoveFromEventList+0xc0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	429a      	cmp	r2, r3
 8005742:	d905      	bls.n	8005750 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <xTaskRemoveFromEventList+0xc4>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e001      	b.n	8005754 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20001674 	.word	0x20001674
 8005764:	20001654 	.word	0x20001654
 8005768:	2000117c 	.word	0x2000117c
 800576c:	2000160c 	.word	0x2000160c
 8005770:	20001178 	.word	0x20001178
 8005774:	20001660 	.word	0x20001660

08005778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <vTaskInternalSetTimeOutState+0x24>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <vTaskInternalSetTimeOutState+0x28>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20001664 	.word	0x20001664
 80057a0:	20001650 	.word	0x20001650

080057a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	613b      	str	r3, [r7, #16]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057e6:	f000 fe09 	bl	80063fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <xTaskCheckForTimeOut+0xbc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d102      	bne.n	800580a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e023      	b.n	8005852 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b15      	ldr	r3, [pc, #84]	; (8005864 <xTaskCheckForTimeOut+0xc0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d007      	beq.n	8005826 <xTaskCheckForTimeOut+0x82>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	e015      	b.n	8005852 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	429a      	cmp	r2, r3
 800582e:	d20b      	bcs.n	8005848 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ff9b 	bl	8005778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e004      	b.n	8005852 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005852:	f000 fe03 	bl	800645c <vPortExitCritical>

	return xReturn;
 8005856:	69fb      	ldr	r3, [r7, #28]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20001650 	.word	0x20001650
 8005864:	20001664 	.word	0x20001664

08005868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <vTaskMissedYield+0x14>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20001660 	.word	0x20001660

08005880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005888:	f000 f852 	bl	8005930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <prvIdleTask+0x28>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d9f9      	bls.n	8005888 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <prvIdleTask+0x2c>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058a4:	e7f0      	b.n	8005888 <prvIdleTask+0x8>
 80058a6:	bf00      	nop
 80058a8:	2000117c 	.word	0x2000117c
 80058ac:	e000ed04 	.word	0xe000ed04

080058b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	e00c      	b.n	80058d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <prvInitialiseTaskLists+0x60>)
 80058c8:	4413      	add	r3, r2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fcdc 	bl	8004288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3301      	adds	r3, #1
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b37      	cmp	r3, #55	; 0x37
 80058da:	d9ef      	bls.n	80058bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058dc:	480d      	ldr	r0, [pc, #52]	; (8005914 <prvInitialiseTaskLists+0x64>)
 80058de:	f7fe fcd3 	bl	8004288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058e2:	480d      	ldr	r0, [pc, #52]	; (8005918 <prvInitialiseTaskLists+0x68>)
 80058e4:	f7fe fcd0 	bl	8004288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058e8:	480c      	ldr	r0, [pc, #48]	; (800591c <prvInitialiseTaskLists+0x6c>)
 80058ea:	f7fe fccd 	bl	8004288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058ee:	480c      	ldr	r0, [pc, #48]	; (8005920 <prvInitialiseTaskLists+0x70>)
 80058f0:	f7fe fcca 	bl	8004288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058f4:	480b      	ldr	r0, [pc, #44]	; (8005924 <prvInitialiseTaskLists+0x74>)
 80058f6:	f7fe fcc7 	bl	8004288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <prvInitialiseTaskLists+0x78>)
 80058fc:	4a05      	ldr	r2, [pc, #20]	; (8005914 <prvInitialiseTaskLists+0x64>)
 80058fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <prvInitialiseTaskLists+0x7c>)
 8005902:	4a05      	ldr	r2, [pc, #20]	; (8005918 <prvInitialiseTaskLists+0x68>)
 8005904:	601a      	str	r2, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000117c 	.word	0x2000117c
 8005914:	200015dc 	.word	0x200015dc
 8005918:	200015f0 	.word	0x200015f0
 800591c:	2000160c 	.word	0x2000160c
 8005920:	20001620 	.word	0x20001620
 8005924:	20001638 	.word	0x20001638
 8005928:	20001604 	.word	0x20001604
 800592c:	20001608 	.word	0x20001608

08005930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005936:	e019      	b.n	800596c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005938:	f000 fd60 	bl	80063fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800593c:	4b10      	ldr	r3, [pc, #64]	; (8005980 <prvCheckTasksWaitingTermination+0x50>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fd23 	bl	8004394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <prvCheckTasksWaitingTermination+0x54>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3b01      	subs	r3, #1
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <prvCheckTasksWaitingTermination+0x54>)
 8005956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <prvCheckTasksWaitingTermination+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3b01      	subs	r3, #1
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <prvCheckTasksWaitingTermination+0x58>)
 8005960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005962:	f000 fd7b 	bl	800645c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f810 	bl	800598c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <prvCheckTasksWaitingTermination+0x58>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e1      	bne.n	8005938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001620 	.word	0x20001620
 8005984:	2000164c 	.word	0x2000164c
 8005988:	20001634 	.word	0x20001634

0800598c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3354      	adds	r3, #84	; 0x54
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fdf7 	bl	800758c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fee9 	bl	8006784 <vPortFree>
				vPortFree( pxTCB );
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fee6 	bl	8006784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059b8:	e018      	b.n	80059ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d103      	bne.n	80059cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fedd 	bl	8006784 <vPortFree>
	}
 80059ca:	e00f      	b.n	80059ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d00a      	beq.n	80059ec <prvDeleteTCB+0x60>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <prvDeleteTCB+0x5e>
	}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059fa:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <prvResetNextTaskUnblockTime+0x40>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <prvResetNextTaskUnblockTime+0x14>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <prvResetNextTaskUnblockTime+0x16>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvResetNextTaskUnblockTime+0x44>)
 8005a10:	f04f 32ff 	mov.w	r2, #4294967295
 8005a14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a16:	e008      	b.n	8005a2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <prvResetNextTaskUnblockTime+0x40>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <prvResetNextTaskUnblockTime+0x44>)
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	20001604 	.word	0x20001604
 8005a38:	2000166c 	.word	0x2000166c

08005a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <xTaskGetSchedulerState+0x34>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	e008      	b.n	8005a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <xTaskGetSchedulerState+0x38>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	e001      	b.n	8005a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a62:	687b      	ldr	r3, [r7, #4]
	}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20001658 	.word	0x20001658
 8005a74:	20001674 	.word	0x20001674

08005a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d056      	beq.n	8005b3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a8e:	4b2e      	ldr	r3, [pc, #184]	; (8005b48 <xTaskPriorityDisinherit+0xd0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d00a      	beq.n	8005aae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60fb      	str	r3, [r7, #12]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d02c      	beq.n	8005b3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d128      	bne.n	8005b3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fc50 	bl	8004394 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <xTaskPriorityDisinherit+0xd4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d903      	bls.n	8005b1c <xTaskPriorityDisinherit+0xa4>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <xTaskPriorityDisinherit+0xd4>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <xTaskPriorityDisinherit+0xd8>)
 8005b2a:	441a      	add	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fbd3 	bl	80042de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b3c:	697b      	ldr	r3, [r7, #20]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20001178 	.word	0x20001178
 8005b4c:	20001654 	.word	0x20001654
 8005b50:	2000117c 	.word	0x2000117c

08005b54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b5e:	4b21      	ldr	r3, [pc, #132]	; (8005be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b64:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fc12 	bl	8004394 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d10a      	bne.n	8005b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4819      	ldr	r0, [pc, #100]	; (8005bec <prvAddCurrentTaskToDelayedList+0x98>)
 8005b88:	f7fe fba9 	bl	80042de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b8c:	e026      	b.n	8005bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d209      	bcs.n	8005bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fbb6 	bl	8004324 <vListInsert>
}
 8005bb8:	e010      	b.n	8005bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bba:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe fbac 	bl	8004324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d202      	bcs.n	8005bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bd6:	4a08      	ldr	r2, [pc, #32]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6013      	str	r3, [r2, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20001650 	.word	0x20001650
 8005be8:	20001178 	.word	0x20001178
 8005bec:	20001638 	.word	0x20001638
 8005bf0:	20001608 	.word	0x20001608
 8005bf4:	20001604 	.word	0x20001604
 8005bf8:	2000166c 	.word	0x2000166c

08005bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c06:	f000 facb 	bl	80061a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c0a:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <xTimerCreateTimerTask+0x80>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d021      	beq.n	8005c56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c1a:	1d3a      	adds	r2, r7, #4
 8005c1c:	f107 0108 	add.w	r1, r7, #8
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fb15 	bl	8004254 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	9202      	str	r2, [sp, #8]
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	2302      	movs	r3, #2
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	4910      	ldr	r1, [pc, #64]	; (8005c80 <xTimerCreateTimerTask+0x84>)
 8005c3e:	4811      	ldr	r0, [pc, #68]	; (8005c84 <xTimerCreateTimerTask+0x88>)
 8005c40:	f7ff f8b6 	bl	8004db0 <xTaskCreateStatic>
 8005c44:	4603      	mov	r3, r0
 8005c46:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <xTimerCreateTimerTask+0x8c>)
 8005c48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <xTimerCreateTimerTask+0x8c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c52:	2301      	movs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	613b      	str	r3, [r7, #16]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	200016a8 	.word	0x200016a8
 8005c80:	08007c14 	.word	0x08007c14
 8005c84:	08005da9 	.word	0x08005da9
 8005c88:	200016ac 	.word	0x200016ac

08005c8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	623b      	str	r3, [r7, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <xTimerGenericCommand+0x98>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02a      	beq.n	8005d18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b05      	cmp	r3, #5
 8005cd2:	dc18      	bgt.n	8005d06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cd4:	f7ff feb2 	bl	8005a3c <xTaskGetSchedulerState>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d109      	bne.n	8005cf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <xTimerGenericCommand+0x98>)
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f107 0110 	add.w	r1, r7, #16
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cea:	f7fe fc7f 	bl	80045ec <xQueueGenericSend>
 8005cee:	6278      	str	r0, [r7, #36]	; 0x24
 8005cf0:	e012      	b.n	8005d18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <xTimerGenericCommand+0x98>)
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	f107 0110 	add.w	r1, r7, #16
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f7fe fc75 	bl	80045ec <xQueueGenericSend>
 8005d02:	6278      	str	r0, [r7, #36]	; 0x24
 8005d04:	e008      	b.n	8005d18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <xTimerGenericCommand+0x98>)
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f107 0110 	add.w	r1, r7, #16
 8005d0e:	2300      	movs	r3, #0
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	f7fe fd69 	bl	80047e8 <xQueueGenericSendFromISR>
 8005d16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3728      	adds	r7, #40	; 0x28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200016a8 	.word	0x200016a8

08005d28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <prvProcessExpiredTimer+0x7c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe fb27 	bl	8004394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d122      	bne.n	8005d94 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	18d1      	adds	r1, r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	6978      	ldr	r0, [r7, #20]
 8005d5c:	f000 f8c8 	bl	8005ef0 <prvInsertTimerInActiveList>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	6978      	ldr	r0, [r7, #20]
 8005d72:	f7ff ff8b 	bl	8005c8c <xTimerGenericCommand>
 8005d76:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60fb      	str	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	4798      	blx	r3
}
 8005d9c:	bf00      	nop
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200016a0 	.word	0x200016a0

08005da8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f857 	bl	8005e68 <prvGetNextExpireTime>
 8005dba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f803 	bl	8005dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dc6:	f000 f8d5 	bl	8005f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dca:	e7f1      	b.n	8005db0 <prvTimerTask+0x8>

08005dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dd6:	f7ff fa3f 	bl	8005258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dda:	f107 0308 	add.w	r3, r7, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f866 	bl	8005eb0 <prvSampleTimeNow>
 8005de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d130      	bne.n	8005e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <prvProcessTimerOrBlockTask+0x3c>
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d806      	bhi.n	8005e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dfa:	f7ff fa3b 	bl	8005274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff91 	bl	8005d28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e06:	e024      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e0e:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <prvProcessTimerOrBlockTask+0x90>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf0c      	ite	eq
 8005e18:	2301      	moveq	r3, #1
 8005e1a:	2300      	movne	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <prvProcessTimerOrBlockTask+0x94>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f7fe ff8b 	bl	8004d48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e32:	f7ff fa1f 	bl	8005274 <xTaskResumeAll>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <prvProcessTimerOrBlockTask+0x98>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
}
 8005e4c:	e001      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e4e:	f7ff fa11 	bl	8005274 <xTaskResumeAll>
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200016a4 	.word	0x200016a4
 8005e60:	200016a8 	.word	0x200016a8
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e70:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <prvGetNextExpireTime+0x44>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <prvGetNextExpireTime+0x44>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	200016a0 	.word	0x200016a0

08005eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005eb8:	f7ff fa7a 	bl	80053b0 <xTaskGetTickCount>
 8005ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <prvSampleTimeNow+0x3c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d205      	bcs.n	8005ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ec8:	f000 f908 	bl	80060dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eda:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvSampleTimeNow+0x3c>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200016b0 	.word	0x200016b0

08005ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d812      	bhi.n	8005f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e01b      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <prvInsertTimerInActiveList+0x7c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fe f9f5 	bl	8004324 <vListInsert>
 8005f3a:	e012      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d206      	bcs.n	8005f52 <prvInsertTimerInActiveList+0x62>
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e007      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <prvInsertTimerInActiveList+0x80>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fe f9e1 	bl	8004324 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	200016a4 	.word	0x200016a4
 8005f70:	200016a0 	.word	0x200016a0

08005f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f7a:	e09d      	b.n	80060b8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da18      	bge.n	8005fb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	3304      	adds	r3, #4
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	61fb      	str	r3, [r7, #28]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005faa:	6850      	ldr	r0, [r2, #4]
 8005fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fae:	6892      	ldr	r2, [r2, #8]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db7e      	blt.n	80060b8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe f9e2 	bl	8004394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff ff6c 	bl	8005eb0 <prvSampleTimeNow>
 8005fd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b09      	cmp	r3, #9
 8005fde:	d86a      	bhi.n	80060b6 <prvProcessReceivedCommands+0x142>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <prvProcessReceivedCommands+0x74>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	080060b9 	.word	0x080060b9
 8005ff8:	0800606d 	.word	0x0800606d
 8005ffc:	080060a5 	.word	0x080060a5
 8006000:	08006011 	.word	0x08006011
 8006004:	08006011 	.word	0x08006011
 8006008:	080060b9 	.word	0x080060b9
 800600c:	0800606d 	.word	0x0800606d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	18d1      	adds	r1, r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601e:	f7ff ff67 	bl	8005ef0 <prvInsertTimerInActiveList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d047      	beq.n	80060b8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800602e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d13f      	bne.n	80060b8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	441a      	add	r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	2100      	movs	r1, #0
 8006048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604a:	f7ff fe1f 	bl	8005c8c <xTimerGenericCommand>
 800604e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d130      	bne.n	80060b8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	61bb      	str	r3, [r7, #24]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	617b      	str	r3, [r7, #20]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	18d1      	adds	r1, r2, r3
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609e:	f7ff ff27 	bl	8005ef0 <prvInsertTimerInActiveList>
					break;
 80060a2:	e009      	b.n	80060b8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80060ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b0:	f000 fb68 	bl	8006784 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060b4:	e000      	b.n	80060b8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80060b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <prvProcessReceivedCommands+0x164>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	1d39      	adds	r1, r7, #4
 80060be:	2200      	movs	r2, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fe fc29 	bl	8004918 <xQueueReceive>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f47f af57 	bne.w	8005f7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	3730      	adds	r7, #48	; 0x30
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	200016a8 	.word	0x200016a8

080060dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060e2:	e045      	b.n	8006170 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <prvSwitchTimerLists+0xbc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ee:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <prvSwitchTimerLists+0xbc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe f949 	bl	8004394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d12e      	bne.n	8006170 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	429a      	cmp	r2, r3
 8006122:	d90e      	bls.n	8006142 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <prvSwitchTimerLists+0xbc>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7fe f8f2 	bl	8004324 <vListInsert>
 8006140:	e016      	b.n	8006170 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006142:	2300      	movs	r3, #0
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	2100      	movs	r1, #0
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff fd9d 	bl	8005c8c <xTimerGenericCommand>
 8006152:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <prvSwitchTimerLists+0x94>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	603b      	str	r3, [r7, #0]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <prvSwitchTimerLists+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1b4      	bne.n	80060e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800617a:	4b07      	ldr	r3, [pc, #28]	; (8006198 <prvSwitchTimerLists+0xbc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <prvSwitchTimerLists+0xc0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a04      	ldr	r2, [pc, #16]	; (8006198 <prvSwitchTimerLists+0xbc>)
 8006186:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <prvSwitchTimerLists+0xc0>)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6013      	str	r3, [r2, #0]
}
 800618e:	bf00      	nop
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	200016a0 	.word	0x200016a0
 800619c:	200016a4 	.word	0x200016a4

080061a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061a6:	f000 f929 	bl	80063fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061aa:	4b15      	ldr	r3, [pc, #84]	; (8006200 <prvCheckForValidListAndQueue+0x60>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d120      	bne.n	80061f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061b2:	4814      	ldr	r0, [pc, #80]	; (8006204 <prvCheckForValidListAndQueue+0x64>)
 80061b4:	f7fe f868 	bl	8004288 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061b8:	4813      	ldr	r0, [pc, #76]	; (8006208 <prvCheckForValidListAndQueue+0x68>)
 80061ba:	f7fe f865 	bl	8004288 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <prvCheckForValidListAndQueue+0x6c>)
 80061c0:	4a10      	ldr	r2, [pc, #64]	; (8006204 <prvCheckForValidListAndQueue+0x64>)
 80061c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061c4:	4b12      	ldr	r3, [pc, #72]	; (8006210 <prvCheckForValidListAndQueue+0x70>)
 80061c6:	4a10      	ldr	r2, [pc, #64]	; (8006208 <prvCheckForValidListAndQueue+0x68>)
 80061c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061ca:	2300      	movs	r3, #0
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	4b11      	ldr	r3, [pc, #68]	; (8006214 <prvCheckForValidListAndQueue+0x74>)
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <prvCheckForValidListAndQueue+0x78>)
 80061d2:	2110      	movs	r1, #16
 80061d4:	200a      	movs	r0, #10
 80061d6:	f7fe f96f 	bl	80044b8 <xQueueGenericCreateStatic>
 80061da:	4603      	mov	r3, r0
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <prvCheckForValidListAndQueue+0x60>)
 80061de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvCheckForValidListAndQueue+0x60>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <prvCheckForValidListAndQueue+0x60>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	490b      	ldr	r1, [pc, #44]	; (800621c <prvCheckForValidListAndQueue+0x7c>)
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fd82 	bl	8004cf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061f4:	f000 f932 	bl	800645c <vPortExitCritical>
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200016a8 	.word	0x200016a8
 8006204:	20001678 	.word	0x20001678
 8006208:	2000168c 	.word	0x2000168c
 800620c:	200016a0 	.word	0x200016a0
 8006210:	200016a4 	.word	0x200016a4
 8006214:	20001754 	.word	0x20001754
 8006218:	200016b4 	.word	0x200016b4
 800621c:	08007c1c 	.word	0x08007c1c

08006220 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3b04      	subs	r3, #4
 8006230:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3b04      	subs	r3, #4
 800623e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 0201 	bic.w	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b04      	subs	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006250:	4a08      	ldr	r2, [pc, #32]	; (8006274 <pxPortInitialiseStack+0x54>)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b14      	subs	r3, #20
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3b20      	subs	r3, #32
 8006266:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr
 8006274:	08006279 	.word	0x08006279

08006278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <prvTaskExitError+0x54>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d00a      	beq.n	80062a2 <prvTaskExitError+0x2a>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60fb      	str	r3, [r7, #12]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <prvTaskExitError+0x28>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60bb      	str	r3, [r7, #8]
}
 80062b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062b6:	bf00      	nop
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0fc      	beq.n	80062b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	2000000c 	.word	0x2000000c

080062d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <pxCurrentTCBConst2>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062da:	f380 8809 	msr	PSP, r0
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8811 	msr	BASEPRI, r0
 80062ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80062ee:	4770      	bx	lr

080062f0 <pxCurrentTCBConst2>:
 80062f0:	20001178 	.word	0x20001178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80062f8:	4806      	ldr	r0, [pc, #24]	; (8006314 <prvPortStartFirstTask+0x1c>)
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	6800      	ldr	r0, [r0, #0]
 80062fe:	f380 8808 	msr	MSP, r0
 8006302:	b662      	cpsie	i
 8006304:	b661      	cpsie	f
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	df00      	svc	0
 8006310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006312:	bf00      	nop
 8006314:	e000ed08 	.word	0xe000ed08

08006318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800631e:	4b32      	ldr	r3, [pc, #200]	; (80063e8 <xPortStartScheduler+0xd0>)
 8006320:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006340:	b2da      	uxtb	r2, r3
 8006342:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <xPortStartScheduler+0xd4>)
 8006344:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006346:	4b2a      	ldr	r3, [pc, #168]	; (80063f0 <xPortStartScheduler+0xd8>)
 8006348:	2207      	movs	r2, #7
 800634a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634c:	e009      	b.n	8006362 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800634e:	4b28      	ldr	r3, [pc, #160]	; (80063f0 <xPortStartScheduler+0xd8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3b01      	subs	r3, #1
 8006354:	4a26      	ldr	r2, [pc, #152]	; (80063f0 <xPortStartScheduler+0xd8>)
 8006356:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d0ef      	beq.n	800634e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800636e:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <xPortStartScheduler+0xd8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1c3 0307 	rsb	r3, r3, #7
 8006376:	2b04      	cmp	r3, #4
 8006378:	d00a      	beq.n	8006390 <xPortStartScheduler+0x78>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60bb      	str	r3, [r7, #8]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <xPortStartScheduler+0xd8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <xPortStartScheduler+0xd8>)
 8006398:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <xPortStartScheduler+0xd8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063a2:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <xPortStartScheduler+0xd8>)
 80063a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <xPortStartScheduler+0xdc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a10      	ldr	r2, [pc, #64]	; (80063f4 <xPortStartScheduler+0xdc>)
 80063b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <xPortStartScheduler+0xdc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a0d      	ldr	r2, [pc, #52]	; (80063f4 <xPortStartScheduler+0xdc>)
 80063c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063c6:	f000 f8b9 	bl	800653c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <xPortStartScheduler+0xe0>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063d0:	f7ff ff92 	bl	80062f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063d4:	f7ff f8b8 	bl	8005548 <vTaskSwitchContext>
	prvTaskExitError();
 80063d8:	f7ff ff4e 	bl	8006278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	e000e400 	.word	0xe000e400
 80063ec:	200017a4 	.word	0x200017a4
 80063f0:	200017a8 	.word	0x200017a8
 80063f4:	e000ed20 	.word	0xe000ed20
 80063f8:	2000000c 	.word	0x2000000c

080063fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <vPortEnterCritical+0x58>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	4a0d      	ldr	r2, [pc, #52]	; (8006454 <vPortEnterCritical+0x58>)
 800641e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <vPortEnterCritical+0x58>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d10f      	bne.n	8006448 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <vPortEnterCritical+0x5c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <vPortEnterCritical+0x4c>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	603b      	str	r3, [r7, #0]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <vPortEnterCritical+0x4a>
	}
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	2000000c 	.word	0x2000000c
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <vPortExitCritical+0x4c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <vPortExitCritical+0x24>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	607b      	str	r3, [r7, #4]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <vPortExitCritical+0x4c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3b01      	subs	r3, #1
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <vPortExitCritical+0x4c>)
 8006488:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <vPortExitCritical+0x4c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <vPortExitCritical+0x42>
 8006492:	2300      	movs	r3, #0
 8006494:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f383 8811 	msr	BASEPRI, r3
}
 800649c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	2000000c 	.word	0x2000000c
 80064ac:	00000000 	.word	0x00000000

080064b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064b0:	f3ef 8009 	mrs	r0, PSP
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <pxCurrentTCBConst>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064c0:	6010      	str	r0, [r2, #0]
 80064c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064ca:	f380 8811 	msr	BASEPRI, r0
 80064ce:	f7ff f83b 	bl	8005548 <vTaskSwitchContext>
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8811 	msr	BASEPRI, r0
 80064da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	6808      	ldr	r0, [r1, #0]
 80064e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064e6:	f380 8809 	msr	PSP, r0
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	4770      	bx	lr

080064f0 <pxCurrentTCBConst>:
 80064f0:	20001178 	.word	0x20001178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006512:	f7fe ff5b 	bl	80053cc <xTaskIncrementTick>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800651c:	4b06      	ldr	r3, [pc, #24]	; (8006538 <SysTick_Handler+0x40>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <vPortSetupTimerInterrupt+0x30>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006546:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <vPortSetupTimerInterrupt+0x38>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a09      	ldr	r2, [pc, #36]	; (8006578 <vPortSetupTimerInterrupt+0x3c>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	4a08      	ldr	r2, [pc, #32]	; (800657c <vPortSetupTimerInterrupt+0x40>)
 800655a:	3b01      	subs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <vPortSetupTimerInterrupt+0x30>)
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr
 800656c:	e000e010 	.word	0xe000e010
 8006570:	e000e018 	.word	0xe000e018
 8006574:	20000000 	.word	0x20000000
 8006578:	10624dd3 	.word	0x10624dd3
 800657c:	e000e014 	.word	0xe000e014

08006580 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006586:	f3ef 8305 	mrs	r3, IPSR
 800658a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d914      	bls.n	80065bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006592:	4a16      	ldr	r2, [pc, #88]	; (80065ec <vPortValidateInterruptPriority+0x6c>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800659c:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <vPortValidateInterruptPriority+0x70>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	7afa      	ldrb	r2, [r7, #11]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d20a      	bcs.n	80065bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	607b      	str	r3, [r7, #4]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <vPortValidateInterruptPriority+0x74>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <vPortValidateInterruptPriority+0x78>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d90a      	bls.n	80065e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	603b      	str	r3, [r7, #0]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <vPortValidateInterruptPriority+0x60>
	}
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr
 80065ec:	e000e3f0 	.word	0xe000e3f0
 80065f0:	200017a4 	.word	0x200017a4
 80065f4:	e000ed0c 	.word	0xe000ed0c
 80065f8:	200017a8 	.word	0x200017a8

080065fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006608:	f7fe fe26 	bl	8005258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800660c:	4b58      	ldr	r3, [pc, #352]	; (8006770 <pvPortMalloc+0x174>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006614:	f000 f910 	bl	8006838 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006618:	4b56      	ldr	r3, [pc, #344]	; (8006774 <pvPortMalloc+0x178>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 808e 	bne.w	8006742 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01d      	beq.n	8006668 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800662c:	2208      	movs	r2, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b00      	cmp	r3, #0
 800663c:	d014      	beq.n	8006668 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f023 0307 	bic.w	r3, r3, #7
 8006644:	3308      	adds	r3, #8
 8006646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <pvPortMalloc+0x6c>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	617b      	str	r3, [r7, #20]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d069      	beq.n	8006742 <pvPortMalloc+0x146>
 800666e:	4b42      	ldr	r3, [pc, #264]	; (8006778 <pvPortMalloc+0x17c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d864      	bhi.n	8006742 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006678:	4b40      	ldr	r3, [pc, #256]	; (800677c <pvPortMalloc+0x180>)
 800667a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800667c:	4b3f      	ldr	r3, [pc, #252]	; (800677c <pvPortMalloc+0x180>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006682:	e004      	b.n	800668e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d903      	bls.n	80066a0 <pvPortMalloc+0xa4>
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f1      	bne.n	8006684 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066a0:	4b33      	ldr	r3, [pc, #204]	; (8006770 <pvPortMalloc+0x174>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d04b      	beq.n	8006742 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2208      	movs	r2, #8
 80066b0:	4413      	add	r3, r2
 80066b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1ad2      	subs	r2, r2, r3
 80066c4:	2308      	movs	r3, #8
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d91f      	bls.n	800670c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <pvPortMalloc+0xf8>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	613b      	str	r3, [r7, #16]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006706:	69b8      	ldr	r0, [r7, #24]
 8006708:	f000 f8f8 	bl	80068fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800670c:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <pvPortMalloc+0x17c>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	4a18      	ldr	r2, [pc, #96]	; (8006778 <pvPortMalloc+0x17c>)
 8006718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800671a:	4b17      	ldr	r3, [pc, #92]	; (8006778 <pvPortMalloc+0x17c>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b18      	ldr	r3, [pc, #96]	; (8006780 <pvPortMalloc+0x184>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d203      	bcs.n	800672e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006726:	4b14      	ldr	r3, [pc, #80]	; (8006778 <pvPortMalloc+0x17c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a15      	ldr	r2, [pc, #84]	; (8006780 <pvPortMalloc+0x184>)
 800672c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <pvPortMalloc+0x178>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	431a      	orrs	r2, r3
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006742:	f7fe fd97 	bl	8005274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <pvPortMalloc+0x16a>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <pvPortMalloc+0x168>
	return pvReturn;
 8006766:	69fb      	ldr	r3, [r7, #28]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3728      	adds	r7, #40	; 0x28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	200037b4 	.word	0x200037b4
 8006774:	200037c0 	.word	0x200037c0
 8006778:	200037b8 	.word	0x200037b8
 800677c:	200037ac 	.word	0x200037ac
 8006780:	200037bc 	.word	0x200037bc

08006784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d048      	beq.n	8006828 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006796:	2308      	movs	r3, #8
 8006798:	425b      	negs	r3, r3
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	4b21      	ldr	r3, [pc, #132]	; (8006830 <vPortFree+0xac>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <vPortFree+0x44>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60fb      	str	r3, [r7, #12]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <vPortFree+0x62>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60bb      	str	r3, [r7, #8]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <vPortFree+0xac>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d019      	beq.n	8006828 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d115      	bne.n	8006828 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <vPortFree+0xac>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	43db      	mvns	r3, r3
 8006806:	401a      	ands	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800680c:	f7fe fd24 	bl	8005258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <vPortFree+0xb0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4413      	add	r3, r2
 800681a:	4a06      	ldr	r2, [pc, #24]	; (8006834 <vPortFree+0xb0>)
 800681c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800681e:	6938      	ldr	r0, [r7, #16]
 8006820:	f000 f86c 	bl	80068fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006824:	f7fe fd26 	bl	8005274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006828:	bf00      	nop
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	200037c0 	.word	0x200037c0
 8006834:	200037b8 	.word	0x200037b8

08006838 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800683e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006842:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006844:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <prvHeapInit+0xac>)
 8006846:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00c      	beq.n	800686c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3307      	adds	r3, #7
 8006856:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0307 	bic.w	r3, r3, #7
 800685e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <prvHeapInit+0xac>)
 8006868:	4413      	add	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <prvHeapInit+0xb0>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006876:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <prvHeapInit+0xb0>)
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006884:	2208      	movs	r2, #8
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0307 	bic.w	r3, r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a15      	ldr	r2, [pc, #84]	; (80068ec <prvHeapInit+0xb4>)
 8006898:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <prvHeapInit+0xb4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2200      	movs	r2, #0
 80068a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <prvHeapInit+0xb4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <prvHeapInit+0xb4>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4a0a      	ldr	r2, [pc, #40]	; (80068f0 <prvHeapInit+0xb8>)
 80068c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <prvHeapInit+0xbc>)
 80068ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068d0:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <prvHeapInit+0xc0>)
 80068d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068d6:	601a      	str	r2, [r3, #0]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	200017ac 	.word	0x200017ac
 80068e8:	200037ac 	.word	0x200037ac
 80068ec:	200037b4 	.word	0x200037b4
 80068f0:	200037bc 	.word	0x200037bc
 80068f4:	200037b8 	.word	0x200037b8
 80068f8:	200037c0 	.word	0x200037c0

080068fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006904:	4b27      	ldr	r3, [pc, #156]	; (80069a4 <prvInsertBlockIntoFreeList+0xa8>)
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	e002      	b.n	8006910 <prvInsertBlockIntoFreeList+0x14>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d8f7      	bhi.n	800690a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	4413      	add	r3, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	429a      	cmp	r2, r3
 800692a:	d108      	bne.n	800693e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	441a      	add	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d118      	bne.n	8006984 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <prvInsertBlockIntoFreeList+0xac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d00d      	beq.n	800697a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	e008      	b.n	800698c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <prvInsertBlockIntoFreeList+0xac>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e003      	b.n	800698c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d002      	beq.n	800699a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	200037ac 	.word	0x200037ac
 80069a8:	200037b4 	.word	0x200037b4

080069ac <__sfputc_r>:
 80069ac:	6893      	ldr	r3, [r2, #8]
 80069ae:	b410      	push	{r4}
 80069b0:	3b01      	subs	r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	6093      	str	r3, [r2, #8]
 80069b6:	da07      	bge.n	80069c8 <__sfputc_r+0x1c>
 80069b8:	6994      	ldr	r4, [r2, #24]
 80069ba:	42a3      	cmp	r3, r4
 80069bc:	db01      	blt.n	80069c2 <__sfputc_r+0x16>
 80069be:	290a      	cmp	r1, #10
 80069c0:	d102      	bne.n	80069c8 <__sfputc_r+0x1c>
 80069c2:	bc10      	pop	{r4}
 80069c4:	f000 bd35 	b.w	8007432 <__swbuf_r>
 80069c8:	6813      	ldr	r3, [r2, #0]
 80069ca:	1c58      	adds	r0, r3, #1
 80069cc:	6010      	str	r0, [r2, #0]
 80069ce:	7019      	strb	r1, [r3, #0]
 80069d0:	4608      	mov	r0, r1
 80069d2:	bc10      	pop	{r4}
 80069d4:	4770      	bx	lr

080069d6 <__sfputs_r>:
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	4606      	mov	r6, r0
 80069da:	460f      	mov	r7, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	18d5      	adds	r5, r2, r3
 80069e0:	42ac      	cmp	r4, r5
 80069e2:	d101      	bne.n	80069e8 <__sfputs_r+0x12>
 80069e4:	2000      	movs	r0, #0
 80069e6:	e007      	b.n	80069f8 <__sfputs_r+0x22>
 80069e8:	463a      	mov	r2, r7
 80069ea:	4630      	mov	r0, r6
 80069ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f0:	f7ff ffdc 	bl	80069ac <__sfputc_r>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d1f3      	bne.n	80069e0 <__sfputs_r+0xa>
 80069f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069fc <_vfiprintf_r>:
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	460d      	mov	r5, r1
 8006a02:	4614      	mov	r4, r2
 8006a04:	4698      	mov	r8, r3
 8006a06:	4606      	mov	r6, r0
 8006a08:	b09d      	sub	sp, #116	; 0x74
 8006a0a:	b118      	cbz	r0, 8006a14 <_vfiprintf_r+0x18>
 8006a0c:	6a03      	ldr	r3, [r0, #32]
 8006a0e:	b90b      	cbnz	r3, 8006a14 <_vfiprintf_r+0x18>
 8006a10:	f000 fb26 	bl	8007060 <__sinit>
 8006a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a16:	07d9      	lsls	r1, r3, #31
 8006a18:	d405      	bmi.n	8006a26 <_vfiprintf_r+0x2a>
 8006a1a:	89ab      	ldrh	r3, [r5, #12]
 8006a1c:	059a      	lsls	r2, r3, #22
 8006a1e:	d402      	bmi.n	8006a26 <_vfiprintf_r+0x2a>
 8006a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a22:	f000 fe69 	bl	80076f8 <__retarget_lock_acquire_recursive>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	071b      	lsls	r3, r3, #28
 8006a2a:	d501      	bpl.n	8006a30 <_vfiprintf_r+0x34>
 8006a2c:	692b      	ldr	r3, [r5, #16]
 8006a2e:	b99b      	cbnz	r3, 8006a58 <_vfiprintf_r+0x5c>
 8006a30:	4629      	mov	r1, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 fd3a 	bl	80074ac <__swsetup_r>
 8006a38:	b170      	cbz	r0, 8006a58 <_vfiprintf_r+0x5c>
 8006a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a3c:	07dc      	lsls	r4, r3, #31
 8006a3e:	d504      	bpl.n	8006a4a <_vfiprintf_r+0x4e>
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	b01d      	add	sp, #116	; 0x74
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	0598      	lsls	r0, r3, #22
 8006a4e:	d4f7      	bmi.n	8006a40 <_vfiprintf_r+0x44>
 8006a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a52:	f000 fe52 	bl	80076fa <__retarget_lock_release_recursive>
 8006a56:	e7f3      	b.n	8006a40 <_vfiprintf_r+0x44>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5c:	2320      	movs	r3, #32
 8006a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a62:	2330      	movs	r3, #48	; 0x30
 8006a64:	f04f 0901 	mov.w	r9, #1
 8006a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006c1c <_vfiprintf_r+0x220>
 8006a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a74:	4623      	mov	r3, r4
 8006a76:	469a      	mov	sl, r3
 8006a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a7c:	b10a      	cbz	r2, 8006a82 <_vfiprintf_r+0x86>
 8006a7e:	2a25      	cmp	r2, #37	; 0x25
 8006a80:	d1f9      	bne.n	8006a76 <_vfiprintf_r+0x7a>
 8006a82:	ebba 0b04 	subs.w	fp, sl, r4
 8006a86:	d00b      	beq.n	8006aa0 <_vfiprintf_r+0xa4>
 8006a88:	465b      	mov	r3, fp
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff ffa1 	bl	80069d6 <__sfputs_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	f000 80a9 	beq.w	8006bec <_vfiprintf_r+0x1f0>
 8006a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a9c:	445a      	add	r2, fp
 8006a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80a1 	beq.w	8006bec <_vfiprintf_r+0x1f0>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab4:	f10a 0a01 	add.w	sl, sl, #1
 8006ab8:	9304      	str	r3, [sp, #16]
 8006aba:	9307      	str	r3, [sp, #28]
 8006abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac2:	4654      	mov	r4, sl
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	4854      	ldr	r0, [pc, #336]	; (8006c1c <_vfiprintf_r+0x220>)
 8006acc:	f000 fe16 	bl	80076fc <memchr>
 8006ad0:	9a04      	ldr	r2, [sp, #16]
 8006ad2:	b9d8      	cbnz	r0, 8006b0c <_vfiprintf_r+0x110>
 8006ad4:	06d1      	lsls	r1, r2, #27
 8006ad6:	bf44      	itt	mi
 8006ad8:	2320      	movmi	r3, #32
 8006ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ade:	0713      	lsls	r3, r2, #28
 8006ae0:	bf44      	itt	mi
 8006ae2:	232b      	movmi	r3, #43	; 0x2b
 8006ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8006aec:	2b2a      	cmp	r3, #42	; 0x2a
 8006aee:	d015      	beq.n	8006b1c <_vfiprintf_r+0x120>
 8006af0:	4654      	mov	r4, sl
 8006af2:	2000      	movs	r0, #0
 8006af4:	f04f 0c0a 	mov.w	ip, #10
 8006af8:	9a07      	ldr	r2, [sp, #28]
 8006afa:	4621      	mov	r1, r4
 8006afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b00:	3b30      	subs	r3, #48	; 0x30
 8006b02:	2b09      	cmp	r3, #9
 8006b04:	d94d      	bls.n	8006ba2 <_vfiprintf_r+0x1a6>
 8006b06:	b1b0      	cbz	r0, 8006b36 <_vfiprintf_r+0x13a>
 8006b08:	9207      	str	r2, [sp, #28]
 8006b0a:	e014      	b.n	8006b36 <_vfiprintf_r+0x13a>
 8006b0c:	eba0 0308 	sub.w	r3, r0, r8
 8006b10:	fa09 f303 	lsl.w	r3, r9, r3
 8006b14:	4313      	orrs	r3, r2
 8006b16:	46a2      	mov	sl, r4
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	e7d2      	b.n	8006ac2 <_vfiprintf_r+0xc6>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	1d19      	adds	r1, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	9103      	str	r1, [sp, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfbb      	ittet	lt
 8006b28:	425b      	neglt	r3, r3
 8006b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b2e:	9307      	strge	r3, [sp, #28]
 8006b30:	9307      	strlt	r3, [sp, #28]
 8006b32:	bfb8      	it	lt
 8006b34:	9204      	strlt	r2, [sp, #16]
 8006b36:	7823      	ldrb	r3, [r4, #0]
 8006b38:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3a:	d10c      	bne.n	8006b56 <_vfiprintf_r+0x15a>
 8006b3c:	7863      	ldrb	r3, [r4, #1]
 8006b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b40:	d134      	bne.n	8006bac <_vfiprintf_r+0x1b0>
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	3402      	adds	r4, #2
 8006b46:	1d1a      	adds	r2, r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	9203      	str	r2, [sp, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfb8      	it	lt
 8006b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c20 <_vfiprintf_r+0x224>
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	7821      	ldrb	r1, [r4, #0]
 8006b60:	f000 fdcc 	bl	80076fc <memchr>
 8006b64:	b138      	cbz	r0, 8006b76 <_vfiprintf_r+0x17a>
 8006b66:	2240      	movs	r2, #64	; 0x40
 8006b68:	9b04      	ldr	r3, [sp, #16]
 8006b6a:	eba0 000a 	sub.w	r0, r0, sl
 8006b6e:	4082      	lsls	r2, r0
 8006b70:	4313      	orrs	r3, r2
 8006b72:	3401      	adds	r4, #1
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7a:	2206      	movs	r2, #6
 8006b7c:	4829      	ldr	r0, [pc, #164]	; (8006c24 <_vfiprintf_r+0x228>)
 8006b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b82:	f000 fdbb 	bl	80076fc <memchr>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d03f      	beq.n	8006c0a <_vfiprintf_r+0x20e>
 8006b8a:	4b27      	ldr	r3, [pc, #156]	; (8006c28 <_vfiprintf_r+0x22c>)
 8006b8c:	bb1b      	cbnz	r3, 8006bd6 <_vfiprintf_r+0x1da>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	3307      	adds	r3, #7
 8006b92:	f023 0307 	bic.w	r3, r3, #7
 8006b96:	3308      	adds	r3, #8
 8006b98:	9303      	str	r3, [sp, #12]
 8006b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9c:	443b      	add	r3, r7
 8006b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba0:	e768      	b.n	8006a74 <_vfiprintf_r+0x78>
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006baa:	e7a6      	b.n	8006afa <_vfiprintf_r+0xfe>
 8006bac:	2300      	movs	r3, #0
 8006bae:	f04f 0c0a 	mov.w	ip, #10
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	3401      	adds	r4, #1
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bbe:	3a30      	subs	r2, #48	; 0x30
 8006bc0:	2a09      	cmp	r2, #9
 8006bc2:	d903      	bls.n	8006bcc <_vfiprintf_r+0x1d0>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0c6      	beq.n	8006b56 <_vfiprintf_r+0x15a>
 8006bc8:	9105      	str	r1, [sp, #20]
 8006bca:	e7c4      	b.n	8006b56 <_vfiprintf_r+0x15a>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	2301      	movs	r3, #1
 8006bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd4:	e7f0      	b.n	8006bb8 <_vfiprintf_r+0x1bc>
 8006bd6:	ab03      	add	r3, sp, #12
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	462a      	mov	r2, r5
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <_vfiprintf_r+0x230>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	f3af 8000 	nop.w
 8006be6:	4607      	mov	r7, r0
 8006be8:	1c78      	adds	r0, r7, #1
 8006bea:	d1d6      	bne.n	8006b9a <_vfiprintf_r+0x19e>
 8006bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bee:	07d9      	lsls	r1, r3, #31
 8006bf0:	d405      	bmi.n	8006bfe <_vfiprintf_r+0x202>
 8006bf2:	89ab      	ldrh	r3, [r5, #12]
 8006bf4:	059a      	lsls	r2, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_vfiprintf_r+0x202>
 8006bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfa:	f000 fd7e 	bl	80076fa <__retarget_lock_release_recursive>
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	065b      	lsls	r3, r3, #25
 8006c02:	f53f af1d 	bmi.w	8006a40 <_vfiprintf_r+0x44>
 8006c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c08:	e71c      	b.n	8006a44 <_vfiprintf_r+0x48>
 8006c0a:	ab03      	add	r3, sp, #12
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	462a      	mov	r2, r5
 8006c10:	4630      	mov	r0, r6
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <_vfiprintf_r+0x230>)
 8006c14:	a904      	add	r1, sp, #16
 8006c16:	f000 f887 	bl	8006d28 <_printf_i>
 8006c1a:	e7e4      	b.n	8006be6 <_vfiprintf_r+0x1ea>
 8006c1c:	08007caa 	.word	0x08007caa
 8006c20:	08007cb0 	.word	0x08007cb0
 8006c24:	08007cb4 	.word	0x08007cb4
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	080069d7 	.word	0x080069d7

08006c30 <vfiprintf>:
 8006c30:	4613      	mov	r3, r2
 8006c32:	460a      	mov	r2, r1
 8006c34:	4601      	mov	r1, r0
 8006c36:	4802      	ldr	r0, [pc, #8]	; (8006c40 <vfiprintf+0x10>)
 8006c38:	6800      	ldr	r0, [r0, #0]
 8006c3a:	f7ff bedf 	b.w	80069fc <_vfiprintf_r>
 8006c3e:	bf00      	nop
 8006c40:	20000068 	.word	0x20000068

08006c44 <_printf_common>:
 8006c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	4616      	mov	r6, r2
 8006c4a:	4699      	mov	r9, r3
 8006c4c:	688a      	ldr	r2, [r1, #8]
 8006c4e:	690b      	ldr	r3, [r1, #16]
 8006c50:	4607      	mov	r7, r0
 8006c52:	4293      	cmp	r3, r2
 8006c54:	bfb8      	it	lt
 8006c56:	4613      	movlt	r3, r2
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c5e:	460c      	mov	r4, r1
 8006c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c64:	b10a      	cbz	r2, 8006c6a <_printf_common+0x26>
 8006c66:	3301      	adds	r3, #1
 8006c68:	6033      	str	r3, [r6, #0]
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	0699      	lsls	r1, r3, #26
 8006c6e:	bf42      	ittt	mi
 8006c70:	6833      	ldrmi	r3, [r6, #0]
 8006c72:	3302      	addmi	r3, #2
 8006c74:	6033      	strmi	r3, [r6, #0]
 8006c76:	6825      	ldr	r5, [r4, #0]
 8006c78:	f015 0506 	ands.w	r5, r5, #6
 8006c7c:	d106      	bne.n	8006c8c <_printf_common+0x48>
 8006c7e:	f104 0a19 	add.w	sl, r4, #25
 8006c82:	68e3      	ldr	r3, [r4, #12]
 8006c84:	6832      	ldr	r2, [r6, #0]
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	dc2b      	bgt.n	8006ce4 <_printf_common+0xa0>
 8006c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c90:	1e13      	subs	r3, r2, #0
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	bf18      	it	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	0692      	lsls	r2, r2, #26
 8006c9a:	d430      	bmi.n	8006cfe <_printf_common+0xba>
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ca4:	47c0      	blx	r8
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d023      	beq.n	8006cf2 <_printf_common+0xae>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	6922      	ldr	r2, [r4, #16]
 8006cae:	f003 0306 	and.w	r3, r3, #6
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	bf14      	ite	ne
 8006cb6:	2500      	movne	r5, #0
 8006cb8:	6833      	ldreq	r3, [r6, #0]
 8006cba:	f04f 0600 	mov.w	r6, #0
 8006cbe:	bf08      	it	eq
 8006cc0:	68e5      	ldreq	r5, [r4, #12]
 8006cc2:	f104 041a 	add.w	r4, r4, #26
 8006cc6:	bf08      	it	eq
 8006cc8:	1aed      	subeq	r5, r5, r3
 8006cca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006cce:	bf08      	it	eq
 8006cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	bfc4      	itt	gt
 8006cd8:	1a9b      	subgt	r3, r3, r2
 8006cda:	18ed      	addgt	r5, r5, r3
 8006cdc:	42b5      	cmp	r5, r6
 8006cde:	d11a      	bne.n	8006d16 <_printf_common+0xd2>
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e008      	b.n	8006cf6 <_printf_common+0xb2>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4652      	mov	r2, sl
 8006ce8:	4649      	mov	r1, r9
 8006cea:	4638      	mov	r0, r7
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d103      	bne.n	8006cfa <_printf_common+0xb6>
 8006cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfa:	3501      	adds	r5, #1
 8006cfc:	e7c1      	b.n	8006c82 <_printf_common+0x3e>
 8006cfe:	2030      	movs	r0, #48	; 0x30
 8006d00:	18e1      	adds	r1, r4, r3
 8006d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d0c:	4422      	add	r2, r4
 8006d0e:	3302      	adds	r3, #2
 8006d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d14:	e7c2      	b.n	8006c9c <_printf_common+0x58>
 8006d16:	2301      	movs	r3, #1
 8006d18:	4622      	mov	r2, r4
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	47c0      	blx	r8
 8006d20:	3001      	adds	r0, #1
 8006d22:	d0e6      	beq.n	8006cf2 <_printf_common+0xae>
 8006d24:	3601      	adds	r6, #1
 8006d26:	e7d9      	b.n	8006cdc <_printf_common+0x98>

08006d28 <_printf_i>:
 8006d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	7e0f      	ldrb	r7, [r1, #24]
 8006d2e:	4691      	mov	r9, r2
 8006d30:	2f78      	cmp	r7, #120	; 0x78
 8006d32:	4680      	mov	r8, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	469a      	mov	sl, r3
 8006d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d3e:	d807      	bhi.n	8006d50 <_printf_i+0x28>
 8006d40:	2f62      	cmp	r7, #98	; 0x62
 8006d42:	d80a      	bhi.n	8006d5a <_printf_i+0x32>
 8006d44:	2f00      	cmp	r7, #0
 8006d46:	f000 80d5 	beq.w	8006ef4 <_printf_i+0x1cc>
 8006d4a:	2f58      	cmp	r7, #88	; 0x58
 8006d4c:	f000 80c1 	beq.w	8006ed2 <_printf_i+0x1aa>
 8006d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d58:	e03a      	b.n	8006dd0 <_printf_i+0xa8>
 8006d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d5e:	2b15      	cmp	r3, #21
 8006d60:	d8f6      	bhi.n	8006d50 <_printf_i+0x28>
 8006d62:	a101      	add	r1, pc, #4	; (adr r1, 8006d68 <_printf_i+0x40>)
 8006d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006dd5 	.word	0x08006dd5
 8006d70:	08006d51 	.word	0x08006d51
 8006d74:	08006d51 	.word	0x08006d51
 8006d78:	08006d51 	.word	0x08006d51
 8006d7c:	08006d51 	.word	0x08006d51
 8006d80:	08006dd5 	.word	0x08006dd5
 8006d84:	08006d51 	.word	0x08006d51
 8006d88:	08006d51 	.word	0x08006d51
 8006d8c:	08006d51 	.word	0x08006d51
 8006d90:	08006d51 	.word	0x08006d51
 8006d94:	08006edb 	.word	0x08006edb
 8006d98:	08006e01 	.word	0x08006e01
 8006d9c:	08006e95 	.word	0x08006e95
 8006da0:	08006d51 	.word	0x08006d51
 8006da4:	08006d51 	.word	0x08006d51
 8006da8:	08006efd 	.word	0x08006efd
 8006dac:	08006d51 	.word	0x08006d51
 8006db0:	08006e01 	.word	0x08006e01
 8006db4:	08006d51 	.word	0x08006d51
 8006db8:	08006d51 	.word	0x08006d51
 8006dbc:	08006e9d 	.word	0x08006e9d
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0a0      	b.n	8006f16 <_printf_i+0x1ee>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	0607      	lsls	r7, r0, #24
 8006dda:	f103 0104 	add.w	r1, r3, #4
 8006dde:	6029      	str	r1, [r5, #0]
 8006de0:	d501      	bpl.n	8006de6 <_printf_i+0xbe>
 8006de2:	681e      	ldr	r6, [r3, #0]
 8006de4:	e003      	b.n	8006dee <_printf_i+0xc6>
 8006de6:	0646      	lsls	r6, r0, #25
 8006de8:	d5fb      	bpl.n	8006de2 <_printf_i+0xba>
 8006dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	da03      	bge.n	8006dfa <_printf_i+0xd2>
 8006df2:	232d      	movs	r3, #45	; 0x2d
 8006df4:	4276      	negs	r6, r6
 8006df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dfa:	230a      	movs	r3, #10
 8006dfc:	4859      	ldr	r0, [pc, #356]	; (8006f64 <_printf_i+0x23c>)
 8006dfe:	e012      	b.n	8006e26 <_printf_i+0xfe>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	6820      	ldr	r0, [r4, #0]
 8006e04:	1d19      	adds	r1, r3, #4
 8006e06:	6029      	str	r1, [r5, #0]
 8006e08:	0605      	lsls	r5, r0, #24
 8006e0a:	d501      	bpl.n	8006e10 <_printf_i+0xe8>
 8006e0c:	681e      	ldr	r6, [r3, #0]
 8006e0e:	e002      	b.n	8006e16 <_printf_i+0xee>
 8006e10:	0641      	lsls	r1, r0, #25
 8006e12:	d5fb      	bpl.n	8006e0c <_printf_i+0xe4>
 8006e14:	881e      	ldrh	r6, [r3, #0]
 8006e16:	2f6f      	cmp	r7, #111	; 0x6f
 8006e18:	bf0c      	ite	eq
 8006e1a:	2308      	moveq	r3, #8
 8006e1c:	230a      	movne	r3, #10
 8006e1e:	4851      	ldr	r0, [pc, #324]	; (8006f64 <_printf_i+0x23c>)
 8006e20:	2100      	movs	r1, #0
 8006e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e26:	6865      	ldr	r5, [r4, #4]
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	bfa8      	it	ge
 8006e2c:	6821      	ldrge	r1, [r4, #0]
 8006e2e:	60a5      	str	r5, [r4, #8]
 8006e30:	bfa4      	itt	ge
 8006e32:	f021 0104 	bicge.w	r1, r1, #4
 8006e36:	6021      	strge	r1, [r4, #0]
 8006e38:	b90e      	cbnz	r6, 8006e3e <_printf_i+0x116>
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	d04b      	beq.n	8006ed6 <_printf_i+0x1ae>
 8006e3e:	4615      	mov	r5, r2
 8006e40:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e44:	fb03 6711 	mls	r7, r3, r1, r6
 8006e48:	5dc7      	ldrb	r7, [r0, r7]
 8006e4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e4e:	4637      	mov	r7, r6
 8006e50:	42bb      	cmp	r3, r7
 8006e52:	460e      	mov	r6, r1
 8006e54:	d9f4      	bls.n	8006e40 <_printf_i+0x118>
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d10b      	bne.n	8006e72 <_printf_i+0x14a>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	07de      	lsls	r6, r3, #31
 8006e5e:	d508      	bpl.n	8006e72 <_printf_i+0x14a>
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	6861      	ldr	r1, [r4, #4]
 8006e64:	4299      	cmp	r1, r3
 8006e66:	bfde      	ittt	le
 8006e68:	2330      	movle	r3, #48	; 0x30
 8006e6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e72:	1b52      	subs	r2, r2, r5
 8006e74:	6122      	str	r2, [r4, #16]
 8006e76:	464b      	mov	r3, r9
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f8cd a000 	str.w	sl, [sp]
 8006e80:	aa03      	add	r2, sp, #12
 8006e82:	f7ff fedf 	bl	8006c44 <_printf_common>
 8006e86:	3001      	adds	r0, #1
 8006e88:	d14a      	bne.n	8006f20 <_printf_i+0x1f8>
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8e:	b004      	add	sp, #16
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	f043 0320 	orr.w	r3, r3, #32
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	2778      	movs	r7, #120	; 0x78
 8006e9e:	4832      	ldr	r0, [pc, #200]	; (8006f68 <_printf_i+0x240>)
 8006ea0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	6829      	ldr	r1, [r5, #0]
 8006ea8:	061f      	lsls	r7, r3, #24
 8006eaa:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eae:	d402      	bmi.n	8006eb6 <_printf_i+0x18e>
 8006eb0:	065f      	lsls	r7, r3, #25
 8006eb2:	bf48      	it	mi
 8006eb4:	b2b6      	uxthmi	r6, r6
 8006eb6:	07df      	lsls	r7, r3, #31
 8006eb8:	bf48      	it	mi
 8006eba:	f043 0320 	orrmi.w	r3, r3, #32
 8006ebe:	6029      	str	r1, [r5, #0]
 8006ec0:	bf48      	it	mi
 8006ec2:	6023      	strmi	r3, [r4, #0]
 8006ec4:	b91e      	cbnz	r6, 8006ece <_printf_i+0x1a6>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	f023 0320 	bic.w	r3, r3, #32
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	2310      	movs	r3, #16
 8006ed0:	e7a6      	b.n	8006e20 <_printf_i+0xf8>
 8006ed2:	4824      	ldr	r0, [pc, #144]	; (8006f64 <_printf_i+0x23c>)
 8006ed4:	e7e4      	b.n	8006ea0 <_printf_i+0x178>
 8006ed6:	4615      	mov	r5, r2
 8006ed8:	e7bd      	b.n	8006e56 <_printf_i+0x12e>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	6826      	ldr	r6, [r4, #0]
 8006ede:	1d18      	adds	r0, r3, #4
 8006ee0:	6961      	ldr	r1, [r4, #20]
 8006ee2:	6028      	str	r0, [r5, #0]
 8006ee4:	0635      	lsls	r5, r6, #24
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	d501      	bpl.n	8006eee <_printf_i+0x1c6>
 8006eea:	6019      	str	r1, [r3, #0]
 8006eec:	e002      	b.n	8006ef4 <_printf_i+0x1cc>
 8006eee:	0670      	lsls	r0, r6, #25
 8006ef0:	d5fb      	bpl.n	8006eea <_printf_i+0x1c2>
 8006ef2:	8019      	strh	r1, [r3, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4615      	mov	r5, r2
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	e7bc      	b.n	8006e76 <_printf_i+0x14e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	2100      	movs	r1, #0
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	602a      	str	r2, [r5, #0]
 8006f04:	681d      	ldr	r5, [r3, #0]
 8006f06:	6862      	ldr	r2, [r4, #4]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 fbf7 	bl	80076fc <memchr>
 8006f0e:	b108      	cbz	r0, 8006f14 <_printf_i+0x1ec>
 8006f10:	1b40      	subs	r0, r0, r5
 8006f12:	6060      	str	r0, [r4, #4]
 8006f14:	6863      	ldr	r3, [r4, #4]
 8006f16:	6123      	str	r3, [r4, #16]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1e:	e7aa      	b.n	8006e76 <_printf_i+0x14e>
 8006f20:	462a      	mov	r2, r5
 8006f22:	4649      	mov	r1, r9
 8006f24:	4640      	mov	r0, r8
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	47d0      	blx	sl
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d0ad      	beq.n	8006e8a <_printf_i+0x162>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	079b      	lsls	r3, r3, #30
 8006f32:	d413      	bmi.n	8006f5c <_printf_i+0x234>
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	4618      	movlt	r0, r3
 8006f3e:	e7a6      	b.n	8006e8e <_printf_i+0x166>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4632      	mov	r2, r6
 8006f44:	4649      	mov	r1, r9
 8006f46:	4640      	mov	r0, r8
 8006f48:	47d0      	blx	sl
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d09d      	beq.n	8006e8a <_printf_i+0x162>
 8006f4e:	3501      	adds	r5, #1
 8006f50:	68e3      	ldr	r3, [r4, #12]
 8006f52:	9903      	ldr	r1, [sp, #12]
 8006f54:	1a5b      	subs	r3, r3, r1
 8006f56:	42ab      	cmp	r3, r5
 8006f58:	dcf2      	bgt.n	8006f40 <_printf_i+0x218>
 8006f5a:	e7eb      	b.n	8006f34 <_printf_i+0x20c>
 8006f5c:	2500      	movs	r5, #0
 8006f5e:	f104 0619 	add.w	r6, r4, #25
 8006f62:	e7f5      	b.n	8006f50 <_printf_i+0x228>
 8006f64:	08007cbb 	.word	0x08007cbb
 8006f68:	08007ccc 	.word	0x08007ccc

08006f6c <std>:
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	4604      	mov	r4, r0
 8006f72:	e9c0 3300 	strd	r3, r3, [r0]
 8006f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f7a:	6083      	str	r3, [r0, #8]
 8006f7c:	8181      	strh	r1, [r0, #12]
 8006f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f80:	81c2      	strh	r2, [r0, #14]
 8006f82:	6183      	str	r3, [r0, #24]
 8006f84:	4619      	mov	r1, r3
 8006f86:	2208      	movs	r2, #8
 8006f88:	305c      	adds	r0, #92	; 0x5c
 8006f8a:	f000 fae7 	bl	800755c <memset>
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <std+0x38>)
 8006f90:	6224      	str	r4, [r4, #32]
 8006f92:	6263      	str	r3, [r4, #36]	; 0x24
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <std+0x3c>)
 8006f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <std+0x40>)
 8006f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <std+0x44>)
 8006f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	bf00      	nop
 8006fa4:	080073ad 	.word	0x080073ad
 8006fa8:	080073cf 	.word	0x080073cf
 8006fac:	08007407 	.word	0x08007407
 8006fb0:	0800742b 	.word	0x0800742b

08006fb4 <stdio_exit_handler>:
 8006fb4:	4a02      	ldr	r2, [pc, #8]	; (8006fc0 <stdio_exit_handler+0xc>)
 8006fb6:	4903      	ldr	r1, [pc, #12]	; (8006fc4 <stdio_exit_handler+0x10>)
 8006fb8:	4803      	ldr	r0, [pc, #12]	; (8006fc8 <stdio_exit_handler+0x14>)
 8006fba:	f000 b895 	b.w	80070e8 <_fwalk_sglue>
 8006fbe:	bf00      	nop
 8006fc0:	20000010 	.word	0x20000010
 8006fc4:	08007a31 	.word	0x08007a31
 8006fc8:	2000001c 	.word	0x2000001c

08006fcc <cleanup_stdio>:
 8006fcc:	6841      	ldr	r1, [r0, #4]
 8006fce:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <cleanup_stdio+0x34>)
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	4299      	cmp	r1, r3
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	d001      	beq.n	8006fdc <cleanup_stdio+0x10>
 8006fd8:	f000 fd2a 	bl	8007a30 <_fflush_r>
 8006fdc:	68a1      	ldr	r1, [r4, #8]
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <cleanup_stdio+0x38>)
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d002      	beq.n	8006fea <cleanup_stdio+0x1e>
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 fd23 	bl	8007a30 <_fflush_r>
 8006fea:	68e1      	ldr	r1, [r4, #12]
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <cleanup_stdio+0x3c>)
 8006fee:	4299      	cmp	r1, r3
 8006ff0:	d004      	beq.n	8006ffc <cleanup_stdio+0x30>
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff8:	f000 bd1a 	b.w	8007a30 <_fflush_r>
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	bf00      	nop
 8007000:	200037c4 	.word	0x200037c4
 8007004:	2000382c 	.word	0x2000382c
 8007008:	20003894 	.word	0x20003894

0800700c <global_stdio_init.part.0>:
 800700c:	b510      	push	{r4, lr}
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <global_stdio_init.part.0+0x30>)
 8007010:	4c0b      	ldr	r4, [pc, #44]	; (8007040 <global_stdio_init.part.0+0x34>)
 8007012:	4a0c      	ldr	r2, [pc, #48]	; (8007044 <global_stdio_init.part.0+0x38>)
 8007014:	4620      	mov	r0, r4
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	2104      	movs	r1, #4
 800701a:	2200      	movs	r2, #0
 800701c:	f7ff ffa6 	bl	8006f6c <std>
 8007020:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007024:	2201      	movs	r2, #1
 8007026:	2109      	movs	r1, #9
 8007028:	f7ff ffa0 	bl	8006f6c <std>
 800702c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007030:	2202      	movs	r2, #2
 8007032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007036:	2112      	movs	r1, #18
 8007038:	f7ff bf98 	b.w	8006f6c <std>
 800703c:	200038fc 	.word	0x200038fc
 8007040:	200037c4 	.word	0x200037c4
 8007044:	08006fb5 	.word	0x08006fb5

08007048 <__sfp_lock_acquire>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__sfp_lock_acquire+0x8>)
 800704a:	f000 bb55 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 800704e:	bf00      	nop
 8007050:	20003905 	.word	0x20003905

08007054 <__sfp_lock_release>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__sfp_lock_release+0x8>)
 8007056:	f000 bb50 	b.w	80076fa <__retarget_lock_release_recursive>
 800705a:	bf00      	nop
 800705c:	20003905 	.word	0x20003905

08007060 <__sinit>:
 8007060:	b510      	push	{r4, lr}
 8007062:	4604      	mov	r4, r0
 8007064:	f7ff fff0 	bl	8007048 <__sfp_lock_acquire>
 8007068:	6a23      	ldr	r3, [r4, #32]
 800706a:	b11b      	cbz	r3, 8007074 <__sinit+0x14>
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007070:	f7ff bff0 	b.w	8007054 <__sfp_lock_release>
 8007074:	4b04      	ldr	r3, [pc, #16]	; (8007088 <__sinit+0x28>)
 8007076:	6223      	str	r3, [r4, #32]
 8007078:	4b04      	ldr	r3, [pc, #16]	; (800708c <__sinit+0x2c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f5      	bne.n	800706c <__sinit+0xc>
 8007080:	f7ff ffc4 	bl	800700c <global_stdio_init.part.0>
 8007084:	e7f2      	b.n	800706c <__sinit+0xc>
 8007086:	bf00      	nop
 8007088:	08006fcd 	.word	0x08006fcd
 800708c:	200038fc 	.word	0x200038fc

08007090 <_fputc_r>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	460e      	mov	r6, r1
 8007094:	4614      	mov	r4, r2
 8007096:	4605      	mov	r5, r0
 8007098:	b118      	cbz	r0, 80070a2 <_fputc_r+0x12>
 800709a:	6a03      	ldr	r3, [r0, #32]
 800709c:	b90b      	cbnz	r3, 80070a2 <_fputc_r+0x12>
 800709e:	f7ff ffdf 	bl	8007060 <__sinit>
 80070a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a4:	07d8      	lsls	r0, r3, #31
 80070a6:	d405      	bmi.n	80070b4 <_fputc_r+0x24>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	0599      	lsls	r1, r3, #22
 80070ac:	d402      	bmi.n	80070b4 <_fputc_r+0x24>
 80070ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b0:	f000 fb22 	bl	80076f8 <__retarget_lock_acquire_recursive>
 80070b4:	4622      	mov	r2, r4
 80070b6:	4628      	mov	r0, r5
 80070b8:	4631      	mov	r1, r6
 80070ba:	f000 f88d 	bl	80071d8 <_putc_r>
 80070be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070c0:	4605      	mov	r5, r0
 80070c2:	07da      	lsls	r2, r3, #31
 80070c4:	d405      	bmi.n	80070d2 <_fputc_r+0x42>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	d402      	bmi.n	80070d2 <_fputc_r+0x42>
 80070cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ce:	f000 fb14 	bl	80076fa <__retarget_lock_release_recursive>
 80070d2:	4628      	mov	r0, r5
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070d8 <fputc>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <fputc+0xc>)
 80070da:	460a      	mov	r2, r1
 80070dc:	4601      	mov	r1, r0
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	f7ff bfd6 	b.w	8007090 <_fputc_r>
 80070e4:	20000068 	.word	0x20000068

080070e8 <_fwalk_sglue>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4607      	mov	r7, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	2600      	movs	r6, #0
 80070f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f8:	f1b9 0901 	subs.w	r9, r9, #1
 80070fc:	d505      	bpl.n	800710a <_fwalk_sglue+0x22>
 80070fe:	6824      	ldr	r4, [r4, #0]
 8007100:	2c00      	cmp	r4, #0
 8007102:	d1f7      	bne.n	80070f4 <_fwalk_sglue+0xc>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d907      	bls.n	8007120 <_fwalk_sglue+0x38>
 8007110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	d003      	beq.n	8007120 <_fwalk_sglue+0x38>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	4306      	orrs	r6, r0
 8007120:	3568      	adds	r5, #104	; 0x68
 8007122:	e7e9      	b.n	80070f8 <_fwalk_sglue+0x10>

08007124 <_fwrite_r>:
 8007124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	9c08      	ldr	r4, [sp, #32]
 800712a:	468a      	mov	sl, r1
 800712c:	4690      	mov	r8, r2
 800712e:	4606      	mov	r6, r0
 8007130:	fb02 f903 	mul.w	r9, r2, r3
 8007134:	b118      	cbz	r0, 800713e <_fwrite_r+0x1a>
 8007136:	6a03      	ldr	r3, [r0, #32]
 8007138:	b90b      	cbnz	r3, 800713e <_fwrite_r+0x1a>
 800713a:	f7ff ff91 	bl	8007060 <__sinit>
 800713e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007140:	07dd      	lsls	r5, r3, #31
 8007142:	d405      	bmi.n	8007150 <_fwrite_r+0x2c>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	0598      	lsls	r0, r3, #22
 8007148:	d402      	bmi.n	8007150 <_fwrite_r+0x2c>
 800714a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714c:	f000 fad4 	bl	80076f8 <__retarget_lock_acquire_recursive>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	0719      	lsls	r1, r3, #28
 8007154:	d516      	bpl.n	8007184 <_fwrite_r+0x60>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	b1a3      	cbz	r3, 8007184 <_fwrite_r+0x60>
 800715a:	2500      	movs	r5, #0
 800715c:	454d      	cmp	r5, r9
 800715e:	d01f      	beq.n	80071a0 <_fwrite_r+0x7c>
 8007160:	68a7      	ldr	r7, [r4, #8]
 8007162:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8007166:	3f01      	subs	r7, #1
 8007168:	2f00      	cmp	r7, #0
 800716a:	60a7      	str	r7, [r4, #8]
 800716c:	da04      	bge.n	8007178 <_fwrite_r+0x54>
 800716e:	69a3      	ldr	r3, [r4, #24]
 8007170:	429f      	cmp	r7, r3
 8007172:	db0f      	blt.n	8007194 <_fwrite_r+0x70>
 8007174:	290a      	cmp	r1, #10
 8007176:	d00d      	beq.n	8007194 <_fwrite_r+0x70>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	7019      	strb	r1, [r3, #0]
 8007180:	3501      	adds	r5, #1
 8007182:	e7eb      	b.n	800715c <_fwrite_r+0x38>
 8007184:	4621      	mov	r1, r4
 8007186:	4630      	mov	r0, r6
 8007188:	f000 f990 	bl	80074ac <__swsetup_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	d0e4      	beq.n	800715a <_fwrite_r+0x36>
 8007190:	2500      	movs	r5, #0
 8007192:	e005      	b.n	80071a0 <_fwrite_r+0x7c>
 8007194:	4622      	mov	r2, r4
 8007196:	4630      	mov	r0, r6
 8007198:	f000 f94b 	bl	8007432 <__swbuf_r>
 800719c:	3001      	adds	r0, #1
 800719e:	d1ef      	bne.n	8007180 <_fwrite_r+0x5c>
 80071a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d405      	bmi.n	80071b2 <_fwrite_r+0x8e>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	059b      	lsls	r3, r3, #22
 80071aa:	d402      	bmi.n	80071b2 <_fwrite_r+0x8e>
 80071ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ae:	f000 faa4 	bl	80076fa <__retarget_lock_release_recursive>
 80071b2:	fbb5 f0f8 	udiv	r0, r5, r8
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080071bc <fwrite>:
 80071bc:	b507      	push	{r0, r1, r2, lr}
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	460a      	mov	r2, r1
 80071c4:	4601      	mov	r1, r0
 80071c6:	4803      	ldr	r0, [pc, #12]	; (80071d4 <fwrite+0x18>)
 80071c8:	6800      	ldr	r0, [r0, #0]
 80071ca:	f7ff ffab 	bl	8007124 <_fwrite_r>
 80071ce:	b003      	add	sp, #12
 80071d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80071d4:	20000068 	.word	0x20000068

080071d8 <_putc_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	460d      	mov	r5, r1
 80071dc:	4614      	mov	r4, r2
 80071de:	4606      	mov	r6, r0
 80071e0:	b118      	cbz	r0, 80071ea <_putc_r+0x12>
 80071e2:	6a03      	ldr	r3, [r0, #32]
 80071e4:	b90b      	cbnz	r3, 80071ea <_putc_r+0x12>
 80071e6:	f7ff ff3b 	bl	8007060 <__sinit>
 80071ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ec:	07d8      	lsls	r0, r3, #31
 80071ee:	d405      	bmi.n	80071fc <_putc_r+0x24>
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	0599      	lsls	r1, r3, #22
 80071f4:	d402      	bmi.n	80071fc <_putc_r+0x24>
 80071f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071f8:	f000 fa7e 	bl	80076f8 <__retarget_lock_acquire_recursive>
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	da05      	bge.n	8007212 <_putc_r+0x3a>
 8007206:	69a2      	ldr	r2, [r4, #24]
 8007208:	4293      	cmp	r3, r2
 800720a:	db12      	blt.n	8007232 <_putc_r+0x5a>
 800720c:	b2eb      	uxtb	r3, r5
 800720e:	2b0a      	cmp	r3, #10
 8007210:	d00f      	beq.n	8007232 <_putc_r+0x5a>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	6022      	str	r2, [r4, #0]
 8007218:	701d      	strb	r5, [r3, #0]
 800721a:	b2ed      	uxtb	r5, r5
 800721c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800721e:	07da      	lsls	r2, r3, #31
 8007220:	d405      	bmi.n	800722e <_putc_r+0x56>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	059b      	lsls	r3, r3, #22
 8007226:	d402      	bmi.n	800722e <_putc_r+0x56>
 8007228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800722a:	f000 fa66 	bl	80076fa <__retarget_lock_release_recursive>
 800722e:	4628      	mov	r0, r5
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	4629      	mov	r1, r5
 8007234:	4622      	mov	r2, r4
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f8fb 	bl	8007432 <__swbuf_r>
 800723c:	4605      	mov	r5, r0
 800723e:	e7ed      	b.n	800721c <_putc_r+0x44>

08007240 <setbuf>:
 8007240:	fab1 f281 	clz	r2, r1
 8007244:	0952      	lsrs	r2, r2, #5
 8007246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724a:	0052      	lsls	r2, r2, #1
 800724c:	f000 b800 	b.w	8007250 <setvbuf>

08007250 <setvbuf>:
 8007250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007254:	461d      	mov	r5, r3
 8007256:	4b54      	ldr	r3, [pc, #336]	; (80073a8 <setvbuf+0x158>)
 8007258:	4604      	mov	r4, r0
 800725a:	681f      	ldr	r7, [r3, #0]
 800725c:	460e      	mov	r6, r1
 800725e:	4690      	mov	r8, r2
 8007260:	b127      	cbz	r7, 800726c <setvbuf+0x1c>
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	b913      	cbnz	r3, 800726c <setvbuf+0x1c>
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff fefa 	bl	8007060 <__sinit>
 800726c:	f1b8 0f02 	cmp.w	r8, #2
 8007270:	d006      	beq.n	8007280 <setvbuf+0x30>
 8007272:	f1b8 0f01 	cmp.w	r8, #1
 8007276:	f200 8094 	bhi.w	80073a2 <setvbuf+0x152>
 800727a:	2d00      	cmp	r5, #0
 800727c:	f2c0 8091 	blt.w	80073a2 <setvbuf+0x152>
 8007280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007282:	07da      	lsls	r2, r3, #31
 8007284:	d405      	bmi.n	8007292 <setvbuf+0x42>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	059b      	lsls	r3, r3, #22
 800728a:	d402      	bmi.n	8007292 <setvbuf+0x42>
 800728c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728e:	f000 fa33 	bl	80076f8 <__retarget_lock_acquire_recursive>
 8007292:	4621      	mov	r1, r4
 8007294:	4638      	mov	r0, r7
 8007296:	f000 fbcb 	bl	8007a30 <_fflush_r>
 800729a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800729c:	b141      	cbz	r1, 80072b0 <setvbuf+0x60>
 800729e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072a2:	4299      	cmp	r1, r3
 80072a4:	d002      	beq.n	80072ac <setvbuf+0x5c>
 80072a6:	4638      	mov	r0, r7
 80072a8:	f000 fa44 	bl	8007734 <_free_r>
 80072ac:	2300      	movs	r3, #0
 80072ae:	6363      	str	r3, [r4, #52]	; 0x34
 80072b0:	2300      	movs	r3, #0
 80072b2:	61a3      	str	r3, [r4, #24]
 80072b4:	6063      	str	r3, [r4, #4]
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	0618      	lsls	r0, r3, #24
 80072ba:	d503      	bpl.n	80072c4 <setvbuf+0x74>
 80072bc:	4638      	mov	r0, r7
 80072be:	6921      	ldr	r1, [r4, #16]
 80072c0:	f000 fa38 	bl	8007734 <_free_r>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f1b8 0f02 	cmp.w	r8, #2
 80072ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	d05f      	beq.n	8007396 <setvbuf+0x146>
 80072d6:	ab01      	add	r3, sp, #4
 80072d8:	466a      	mov	r2, sp
 80072da:	4621      	mov	r1, r4
 80072dc:	4638      	mov	r0, r7
 80072de:	f000 fbcf 	bl	8007a80 <__swhatbuf_r>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	4318      	orrs	r0, r3
 80072e6:	81a0      	strh	r0, [r4, #12]
 80072e8:	bb2d      	cbnz	r5, 8007336 <setvbuf+0xe6>
 80072ea:	9d00      	ldr	r5, [sp, #0]
 80072ec:	4628      	mov	r0, r5
 80072ee:	f000 fa69 	bl	80077c4 <malloc>
 80072f2:	4606      	mov	r6, r0
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d150      	bne.n	800739a <setvbuf+0x14a>
 80072f8:	f8dd 9000 	ldr.w	r9, [sp]
 80072fc:	45a9      	cmp	r9, r5
 80072fe:	d13e      	bne.n	800737e <setvbuf+0x12e>
 8007300:	f04f 35ff 	mov.w	r5, #4294967295
 8007304:	2200      	movs	r2, #0
 8007306:	60a2      	str	r2, [r4, #8]
 8007308:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	6122      	str	r2, [r4, #16]
 8007310:	2201      	movs	r2, #1
 8007312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007316:	6162      	str	r2, [r4, #20]
 8007318:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800731a:	f043 0302 	orr.w	r3, r3, #2
 800731e:	07d1      	lsls	r1, r2, #31
 8007320:	81a3      	strh	r3, [r4, #12]
 8007322:	d404      	bmi.n	800732e <setvbuf+0xde>
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	d402      	bmi.n	800732e <setvbuf+0xde>
 8007328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800732a:	f000 f9e6 	bl	80076fa <__retarget_lock_release_recursive>
 800732e:	4628      	mov	r0, r5
 8007330:	b003      	add	sp, #12
 8007332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007336:	2e00      	cmp	r6, #0
 8007338:	d0d8      	beq.n	80072ec <setvbuf+0x9c>
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	b913      	cbnz	r3, 8007344 <setvbuf+0xf4>
 800733e:	4638      	mov	r0, r7
 8007340:	f7ff fe8e 	bl	8007060 <__sinit>
 8007344:	f1b8 0f01 	cmp.w	r8, #1
 8007348:	bf08      	it	eq
 800734a:	89a3      	ldrheq	r3, [r4, #12]
 800734c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007350:	bf04      	itt	eq
 8007352:	f043 0301 	orreq.w	r3, r3, #1
 8007356:	81a3      	strheq	r3, [r4, #12]
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	6026      	str	r6, [r4, #0]
 800735c:	f013 0208 	ands.w	r2, r3, #8
 8007360:	d01d      	beq.n	800739e <setvbuf+0x14e>
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	bf41      	itttt	mi
 8007366:	2200      	movmi	r2, #0
 8007368:	426d      	negmi	r5, r5
 800736a:	60a2      	strmi	r2, [r4, #8]
 800736c:	61a5      	strmi	r5, [r4, #24]
 800736e:	bf58      	it	pl
 8007370:	60a5      	strpl	r5, [r4, #8]
 8007372:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007374:	f015 0501 	ands.w	r5, r5, #1
 8007378:	d0d4      	beq.n	8007324 <setvbuf+0xd4>
 800737a:	2500      	movs	r5, #0
 800737c:	e7d7      	b.n	800732e <setvbuf+0xde>
 800737e:	4648      	mov	r0, r9
 8007380:	f000 fa20 	bl	80077c4 <malloc>
 8007384:	4606      	mov	r6, r0
 8007386:	2800      	cmp	r0, #0
 8007388:	d0ba      	beq.n	8007300 <setvbuf+0xb0>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	464d      	mov	r5, r9
 800738e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	e7d1      	b.n	800733a <setvbuf+0xea>
 8007396:	2500      	movs	r5, #0
 8007398:	e7b4      	b.n	8007304 <setvbuf+0xb4>
 800739a:	46a9      	mov	r9, r5
 800739c:	e7f5      	b.n	800738a <setvbuf+0x13a>
 800739e:	60a2      	str	r2, [r4, #8]
 80073a0:	e7e7      	b.n	8007372 <setvbuf+0x122>
 80073a2:	f04f 35ff 	mov.w	r5, #4294967295
 80073a6:	e7c2      	b.n	800732e <setvbuf+0xde>
 80073a8:	20000068 	.word	0x20000068

080073ac <__sread>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	460c      	mov	r4, r1
 80073b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b4:	f000 f952 	bl	800765c <_read_r>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	bfab      	itete	ge
 80073bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073be:	89a3      	ldrhlt	r3, [r4, #12]
 80073c0:	181b      	addge	r3, r3, r0
 80073c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073c6:	bfac      	ite	ge
 80073c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ca:	81a3      	strhlt	r3, [r4, #12]
 80073cc:	bd10      	pop	{r4, pc}

080073ce <__swrite>:
 80073ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	461f      	mov	r7, r3
 80073d4:	898b      	ldrh	r3, [r1, #12]
 80073d6:	4605      	mov	r5, r0
 80073d8:	05db      	lsls	r3, r3, #23
 80073da:	460c      	mov	r4, r1
 80073dc:	4616      	mov	r6, r2
 80073de:	d505      	bpl.n	80073ec <__swrite+0x1e>
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e8:	f000 f926 	bl	8007638 <_lseek_r>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	4632      	mov	r2, r6
 80073f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	4628      	mov	r0, r5
 80073f8:	463b      	mov	r3, r7
 80073fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007402:	f000 b93d 	b.w	8007680 <_write_r>

08007406 <__sseek>:
 8007406:	b510      	push	{r4, lr}
 8007408:	460c      	mov	r4, r1
 800740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740e:	f000 f913 	bl	8007638 <_lseek_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	bf15      	itete	ne
 8007418:	6560      	strne	r0, [r4, #84]	; 0x54
 800741a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007422:	81a3      	strheq	r3, [r4, #12]
 8007424:	bf18      	it	ne
 8007426:	81a3      	strhne	r3, [r4, #12]
 8007428:	bd10      	pop	{r4, pc}

0800742a <__sclose>:
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	f000 b89d 	b.w	800756c <_close_r>

08007432 <__swbuf_r>:
 8007432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007434:	460e      	mov	r6, r1
 8007436:	4614      	mov	r4, r2
 8007438:	4605      	mov	r5, r0
 800743a:	b118      	cbz	r0, 8007444 <__swbuf_r+0x12>
 800743c:	6a03      	ldr	r3, [r0, #32]
 800743e:	b90b      	cbnz	r3, 8007444 <__swbuf_r+0x12>
 8007440:	f7ff fe0e 	bl	8007060 <__sinit>
 8007444:	69a3      	ldr	r3, [r4, #24]
 8007446:	60a3      	str	r3, [r4, #8]
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	071a      	lsls	r2, r3, #28
 800744c:	d525      	bpl.n	800749a <__swbuf_r+0x68>
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	b31b      	cbz	r3, 800749a <__swbuf_r+0x68>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	6922      	ldr	r2, [r4, #16]
 8007456:	b2f6      	uxtb	r6, r6
 8007458:	1a98      	subs	r0, r3, r2
 800745a:	6963      	ldr	r3, [r4, #20]
 800745c:	4637      	mov	r7, r6
 800745e:	4283      	cmp	r3, r0
 8007460:	dc04      	bgt.n	800746c <__swbuf_r+0x3a>
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 fae3 	bl	8007a30 <_fflush_r>
 800746a:	b9e0      	cbnz	r0, 80074a6 <__swbuf_r+0x74>
 800746c:	68a3      	ldr	r3, [r4, #8]
 800746e:	3b01      	subs	r3, #1
 8007470:	60a3      	str	r3, [r4, #8]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	6022      	str	r2, [r4, #0]
 8007478:	701e      	strb	r6, [r3, #0]
 800747a:	6962      	ldr	r2, [r4, #20]
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	429a      	cmp	r2, r3
 8007480:	d004      	beq.n	800748c <__swbuf_r+0x5a>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	07db      	lsls	r3, r3, #31
 8007486:	d506      	bpl.n	8007496 <__swbuf_r+0x64>
 8007488:	2e0a      	cmp	r6, #10
 800748a:	d104      	bne.n	8007496 <__swbuf_r+0x64>
 800748c:	4621      	mov	r1, r4
 800748e:	4628      	mov	r0, r5
 8007490:	f000 face 	bl	8007a30 <_fflush_r>
 8007494:	b938      	cbnz	r0, 80074a6 <__swbuf_r+0x74>
 8007496:	4638      	mov	r0, r7
 8007498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800749a:	4621      	mov	r1, r4
 800749c:	4628      	mov	r0, r5
 800749e:	f000 f805 	bl	80074ac <__swsetup_r>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d0d5      	beq.n	8007452 <__swbuf_r+0x20>
 80074a6:	f04f 37ff 	mov.w	r7, #4294967295
 80074aa:	e7f4      	b.n	8007496 <__swbuf_r+0x64>

080074ac <__swsetup_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <__swsetup_r+0xac>)
 80074b0:	4605      	mov	r5, r0
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	460c      	mov	r4, r1
 80074b6:	b118      	cbz	r0, 80074c0 <__swsetup_r+0x14>
 80074b8:	6a03      	ldr	r3, [r0, #32]
 80074ba:	b90b      	cbnz	r3, 80074c0 <__swsetup_r+0x14>
 80074bc:	f7ff fdd0 	bl	8007060 <__sinit>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074c6:	0718      	lsls	r0, r3, #28
 80074c8:	d422      	bmi.n	8007510 <__swsetup_r+0x64>
 80074ca:	06d9      	lsls	r1, r3, #27
 80074cc:	d407      	bmi.n	80074de <__swsetup_r+0x32>
 80074ce:	2309      	movs	r3, #9
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	81a3      	strh	r3, [r4, #12]
 80074dc:	e034      	b.n	8007548 <__swsetup_r+0x9c>
 80074de:	0758      	lsls	r0, r3, #29
 80074e0:	d512      	bpl.n	8007508 <__swsetup_r+0x5c>
 80074e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074e4:	b141      	cbz	r1, 80074f8 <__swsetup_r+0x4c>
 80074e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d002      	beq.n	80074f4 <__swsetup_r+0x48>
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 f920 	bl	8007734 <_free_r>
 80074f4:	2300      	movs	r3, #0
 80074f6:	6363      	str	r3, [r4, #52]	; 0x34
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	2300      	movs	r3, #0
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f043 0308 	orr.w	r3, r3, #8
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	b94b      	cbnz	r3, 8007528 <__swsetup_r+0x7c>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800751a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800751e:	d003      	beq.n	8007528 <__swsetup_r+0x7c>
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f000 fad1 	bl	8007aca <__smakebuf_r>
 8007528:	89a0      	ldrh	r0, [r4, #12]
 800752a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800752e:	f010 0301 	ands.w	r3, r0, #1
 8007532:	d00a      	beq.n	800754a <__swsetup_r+0x9e>
 8007534:	2300      	movs	r3, #0
 8007536:	60a3      	str	r3, [r4, #8]
 8007538:	6963      	ldr	r3, [r4, #20]
 800753a:	425b      	negs	r3, r3
 800753c:	61a3      	str	r3, [r4, #24]
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	b943      	cbnz	r3, 8007554 <__swsetup_r+0xa8>
 8007542:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007546:	d1c4      	bne.n	80074d2 <__swsetup_r+0x26>
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	0781      	lsls	r1, r0, #30
 800754c:	bf58      	it	pl
 800754e:	6963      	ldrpl	r3, [r4, #20]
 8007550:	60a3      	str	r3, [r4, #8]
 8007552:	e7f4      	b.n	800753e <__swsetup_r+0x92>
 8007554:	2000      	movs	r0, #0
 8007556:	e7f7      	b.n	8007548 <__swsetup_r+0x9c>
 8007558:	20000068 	.word	0x20000068

0800755c <memset>:
 800755c:	4603      	mov	r3, r0
 800755e:	4402      	add	r2, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <_close_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	2300      	movs	r3, #0
 8007570:	4d05      	ldr	r5, [pc, #20]	; (8007588 <_close_r+0x1c>)
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7f9 fbf1 	bl	8000d5e <_close>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_close_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_close_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20003900 	.word	0x20003900

0800758c <_reclaim_reent>:
 800758c:	4b29      	ldr	r3, [pc, #164]	; (8007634 <_reclaim_reent+0xa8>)
 800758e:	b570      	push	{r4, r5, r6, lr}
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4604      	mov	r4, r0
 8007594:	4283      	cmp	r3, r0
 8007596:	d04b      	beq.n	8007630 <_reclaim_reent+0xa4>
 8007598:	69c3      	ldr	r3, [r0, #28]
 800759a:	b143      	cbz	r3, 80075ae <_reclaim_reent+0x22>
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d144      	bne.n	800762c <_reclaim_reent+0xa0>
 80075a2:	69e3      	ldr	r3, [r4, #28]
 80075a4:	6819      	ldr	r1, [r3, #0]
 80075a6:	b111      	cbz	r1, 80075ae <_reclaim_reent+0x22>
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 f8c3 	bl	8007734 <_free_r>
 80075ae:	6961      	ldr	r1, [r4, #20]
 80075b0:	b111      	cbz	r1, 80075b8 <_reclaim_reent+0x2c>
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 f8be 	bl	8007734 <_free_r>
 80075b8:	69e1      	ldr	r1, [r4, #28]
 80075ba:	b111      	cbz	r1, 80075c2 <_reclaim_reent+0x36>
 80075bc:	4620      	mov	r0, r4
 80075be:	f000 f8b9 	bl	8007734 <_free_r>
 80075c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80075c4:	b111      	cbz	r1, 80075cc <_reclaim_reent+0x40>
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 f8b4 	bl	8007734 <_free_r>
 80075cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ce:	b111      	cbz	r1, 80075d6 <_reclaim_reent+0x4a>
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 f8af 	bl	8007734 <_free_r>
 80075d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80075d8:	b111      	cbz	r1, 80075e0 <_reclaim_reent+0x54>
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 f8aa 	bl	8007734 <_free_r>
 80075e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075e2:	b111      	cbz	r1, 80075ea <_reclaim_reent+0x5e>
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 f8a5 	bl	8007734 <_free_r>
 80075ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80075ec:	b111      	cbz	r1, 80075f4 <_reclaim_reent+0x68>
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f8a0 	bl	8007734 <_free_r>
 80075f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80075f6:	b111      	cbz	r1, 80075fe <_reclaim_reent+0x72>
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 f89b 	bl	8007734 <_free_r>
 80075fe:	6a23      	ldr	r3, [r4, #32]
 8007600:	b1b3      	cbz	r3, 8007630 <_reclaim_reent+0xa4>
 8007602:	4620      	mov	r0, r4
 8007604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007608:	4718      	bx	r3
 800760a:	5949      	ldr	r1, [r1, r5]
 800760c:	b941      	cbnz	r1, 8007620 <_reclaim_reent+0x94>
 800760e:	3504      	adds	r5, #4
 8007610:	69e3      	ldr	r3, [r4, #28]
 8007612:	2d80      	cmp	r5, #128	; 0x80
 8007614:	68d9      	ldr	r1, [r3, #12]
 8007616:	d1f8      	bne.n	800760a <_reclaim_reent+0x7e>
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f88b 	bl	8007734 <_free_r>
 800761e:	e7c0      	b.n	80075a2 <_reclaim_reent+0x16>
 8007620:	680e      	ldr	r6, [r1, #0]
 8007622:	4620      	mov	r0, r4
 8007624:	f000 f886 	bl	8007734 <_free_r>
 8007628:	4631      	mov	r1, r6
 800762a:	e7ef      	b.n	800760c <_reclaim_reent+0x80>
 800762c:	2500      	movs	r5, #0
 800762e:	e7ef      	b.n	8007610 <_reclaim_reent+0x84>
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	bf00      	nop
 8007634:	20000068 	.word	0x20000068

08007638 <_lseek_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	2200      	movs	r2, #0
 8007642:	4d05      	ldr	r5, [pc, #20]	; (8007658 <_lseek_r+0x20>)
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f7f9 fbad 	bl	8000da6 <_lseek>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_lseek_r+0x1e>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_lseek_r+0x1e>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	20003900 	.word	0x20003900

0800765c <_read_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	2200      	movs	r2, #0
 8007666:	4d05      	ldr	r5, [pc, #20]	; (800767c <_read_r+0x20>)
 8007668:	602a      	str	r2, [r5, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	f7f9 fb3e 	bl	8000cec <_read>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_read_r+0x1e>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_read_r+0x1e>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20003900 	.word	0x20003900

08007680 <_write_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	4611      	mov	r1, r2
 8007688:	2200      	movs	r2, #0
 800768a:	4d05      	ldr	r5, [pc, #20]	; (80076a0 <_write_r+0x20>)
 800768c:	602a      	str	r2, [r5, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f7f9 fb49 	bl	8000d26 <_write>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_write_r+0x1e>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_write_r+0x1e>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20003900 	.word	0x20003900

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000068 	.word	0x20000068

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	2600      	movs	r6, #0
 80076b4:	4d0c      	ldr	r5, [pc, #48]	; (80076e8 <__libc_init_array+0x38>)
 80076b6:	4c0d      	ldr	r4, [pc, #52]	; (80076ec <__libc_init_array+0x3c>)
 80076b8:	1b64      	subs	r4, r4, r5
 80076ba:	10a4      	asrs	r4, r4, #2
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	f000 fa72 	bl	8007ba8 <_init>
 80076c4:	2600      	movs	r6, #0
 80076c6:	4d0a      	ldr	r5, [pc, #40]	; (80076f0 <__libc_init_array+0x40>)
 80076c8:	4c0a      	ldr	r4, [pc, #40]	; (80076f4 <__libc_init_array+0x44>)
 80076ca:	1b64      	subs	r4, r4, r5
 80076cc:	10a4      	asrs	r4, r4, #2
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	08007ce0 	.word	0x08007ce0
 80076ec:	08007ce0 	.word	0x08007ce0
 80076f0:	08007ce0 	.word	0x08007ce0
 80076f4:	08007ce4 	.word	0x08007ce4

080076f8 <__retarget_lock_acquire_recursive>:
 80076f8:	4770      	bx	lr

080076fa <__retarget_lock_release_recursive>:
 80076fa:	4770      	bx	lr

080076fc <memchr>:
 80076fc:	4603      	mov	r3, r0
 80076fe:	b510      	push	{r4, lr}
 8007700:	b2c9      	uxtb	r1, r1
 8007702:	4402      	add	r2, r0
 8007704:	4293      	cmp	r3, r2
 8007706:	4618      	mov	r0, r3
 8007708:	d101      	bne.n	800770e <memchr+0x12>
 800770a:	2000      	movs	r0, #0
 800770c:	e003      	b.n	8007716 <memchr+0x1a>
 800770e:	7804      	ldrb	r4, [r0, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	428c      	cmp	r4, r1
 8007714:	d1f6      	bne.n	8007704 <memchr+0x8>
 8007716:	bd10      	pop	{r4, pc}

08007718 <memcpy>:
 8007718:	440a      	add	r2, r1
 800771a:	4291      	cmp	r1, r2
 800771c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007720:	d100      	bne.n	8007724 <memcpy+0xc>
 8007722:	4770      	bx	lr
 8007724:	b510      	push	{r4, lr}
 8007726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772a:	4291      	cmp	r1, r2
 800772c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007730:	d1f9      	bne.n	8007726 <memcpy+0xe>
 8007732:	bd10      	pop	{r4, pc}

08007734 <_free_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4605      	mov	r5, r0
 8007738:	2900      	cmp	r1, #0
 800773a:	d040      	beq.n	80077be <_free_r+0x8a>
 800773c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007740:	1f0c      	subs	r4, r1, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	bfb8      	it	lt
 8007746:	18e4      	addlt	r4, r4, r3
 8007748:	f000 f8e4 	bl	8007914 <__malloc_lock>
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <_free_r+0x8c>)
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	b933      	cbnz	r3, 8007760 <_free_r+0x2c>
 8007752:	6063      	str	r3, [r4, #4]
 8007754:	6014      	str	r4, [r2, #0]
 8007756:	4628      	mov	r0, r5
 8007758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800775c:	f000 b8e0 	b.w	8007920 <__malloc_unlock>
 8007760:	42a3      	cmp	r3, r4
 8007762:	d908      	bls.n	8007776 <_free_r+0x42>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	1821      	adds	r1, r4, r0
 8007768:	428b      	cmp	r3, r1
 800776a:	bf01      	itttt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	1809      	addeq	r1, r1, r0
 8007772:	6021      	streq	r1, [r4, #0]
 8007774:	e7ed      	b.n	8007752 <_free_r+0x1e>
 8007776:	461a      	mov	r2, r3
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	b10b      	cbz	r3, 8007780 <_free_r+0x4c>
 800777c:	42a3      	cmp	r3, r4
 800777e:	d9fa      	bls.n	8007776 <_free_r+0x42>
 8007780:	6811      	ldr	r1, [r2, #0]
 8007782:	1850      	adds	r0, r2, r1
 8007784:	42a0      	cmp	r0, r4
 8007786:	d10b      	bne.n	80077a0 <_free_r+0x6c>
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	4401      	add	r1, r0
 800778c:	1850      	adds	r0, r2, r1
 800778e:	4283      	cmp	r3, r0
 8007790:	6011      	str	r1, [r2, #0]
 8007792:	d1e0      	bne.n	8007756 <_free_r+0x22>
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4408      	add	r0, r1
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	6053      	str	r3, [r2, #4]
 800779e:	e7da      	b.n	8007756 <_free_r+0x22>
 80077a0:	d902      	bls.n	80077a8 <_free_r+0x74>
 80077a2:	230c      	movs	r3, #12
 80077a4:	602b      	str	r3, [r5, #0]
 80077a6:	e7d6      	b.n	8007756 <_free_r+0x22>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	1821      	adds	r1, r4, r0
 80077ac:	428b      	cmp	r3, r1
 80077ae:	bf01      	itttt	eq
 80077b0:	6819      	ldreq	r1, [r3, #0]
 80077b2:	685b      	ldreq	r3, [r3, #4]
 80077b4:	1809      	addeq	r1, r1, r0
 80077b6:	6021      	streq	r1, [r4, #0]
 80077b8:	6063      	str	r3, [r4, #4]
 80077ba:	6054      	str	r4, [r2, #4]
 80077bc:	e7cb      	b.n	8007756 <_free_r+0x22>
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20003908 	.word	0x20003908

080077c4 <malloc>:
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <malloc+0xc>)
 80077c6:	4601      	mov	r1, r0
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f000 b823 	b.w	8007814 <_malloc_r>
 80077ce:	bf00      	nop
 80077d0:	20000068 	.word	0x20000068

080077d4 <sbrk_aligned>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4e0e      	ldr	r6, [pc, #56]	; (8007810 <sbrk_aligned+0x3c>)
 80077d8:	460c      	mov	r4, r1
 80077da:	6831      	ldr	r1, [r6, #0]
 80077dc:	4605      	mov	r5, r0
 80077de:	b911      	cbnz	r1, 80077e6 <sbrk_aligned+0x12>
 80077e0:	f000 f9d2 	bl	8007b88 <_sbrk_r>
 80077e4:	6030      	str	r0, [r6, #0]
 80077e6:	4621      	mov	r1, r4
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f9cd 	bl	8007b88 <_sbrk_r>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d00a      	beq.n	8007808 <sbrk_aligned+0x34>
 80077f2:	1cc4      	adds	r4, r0, #3
 80077f4:	f024 0403 	bic.w	r4, r4, #3
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d007      	beq.n	800780c <sbrk_aligned+0x38>
 80077fc:	1a21      	subs	r1, r4, r0
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f9c2 	bl	8007b88 <_sbrk_r>
 8007804:	3001      	adds	r0, #1
 8007806:	d101      	bne.n	800780c <sbrk_aligned+0x38>
 8007808:	f04f 34ff 	mov.w	r4, #4294967295
 800780c:	4620      	mov	r0, r4
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	2000390c 	.word	0x2000390c

08007814 <_malloc_r>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	1ccd      	adds	r5, r1, #3
 800781a:	f025 0503 	bic.w	r5, r5, #3
 800781e:	3508      	adds	r5, #8
 8007820:	2d0c      	cmp	r5, #12
 8007822:	bf38      	it	cc
 8007824:	250c      	movcc	r5, #12
 8007826:	2d00      	cmp	r5, #0
 8007828:	4607      	mov	r7, r0
 800782a:	db01      	blt.n	8007830 <_malloc_r+0x1c>
 800782c:	42a9      	cmp	r1, r5
 800782e:	d905      	bls.n	800783c <_malloc_r+0x28>
 8007830:	230c      	movs	r3, #12
 8007832:	2600      	movs	r6, #0
 8007834:	603b      	str	r3, [r7, #0]
 8007836:	4630      	mov	r0, r6
 8007838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007910 <_malloc_r+0xfc>
 8007840:	f000 f868 	bl	8007914 <__malloc_lock>
 8007844:	f8d8 3000 	ldr.w	r3, [r8]
 8007848:	461c      	mov	r4, r3
 800784a:	bb5c      	cbnz	r4, 80078a4 <_malloc_r+0x90>
 800784c:	4629      	mov	r1, r5
 800784e:	4638      	mov	r0, r7
 8007850:	f7ff ffc0 	bl	80077d4 <sbrk_aligned>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	4604      	mov	r4, r0
 8007858:	d155      	bne.n	8007906 <_malloc_r+0xf2>
 800785a:	f8d8 4000 	ldr.w	r4, [r8]
 800785e:	4626      	mov	r6, r4
 8007860:	2e00      	cmp	r6, #0
 8007862:	d145      	bne.n	80078f0 <_malloc_r+0xdc>
 8007864:	2c00      	cmp	r4, #0
 8007866:	d048      	beq.n	80078fa <_malloc_r+0xe6>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	4631      	mov	r1, r6
 800786c:	4638      	mov	r0, r7
 800786e:	eb04 0903 	add.w	r9, r4, r3
 8007872:	f000 f989 	bl	8007b88 <_sbrk_r>
 8007876:	4581      	cmp	r9, r0
 8007878:	d13f      	bne.n	80078fa <_malloc_r+0xe6>
 800787a:	6821      	ldr	r1, [r4, #0]
 800787c:	4638      	mov	r0, r7
 800787e:	1a6d      	subs	r5, r5, r1
 8007880:	4629      	mov	r1, r5
 8007882:	f7ff ffa7 	bl	80077d4 <sbrk_aligned>
 8007886:	3001      	adds	r0, #1
 8007888:	d037      	beq.n	80078fa <_malloc_r+0xe6>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	442b      	add	r3, r5
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	f8d8 3000 	ldr.w	r3, [r8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d038      	beq.n	800790a <_malloc_r+0xf6>
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	42a2      	cmp	r2, r4
 800789c:	d12b      	bne.n	80078f6 <_malloc_r+0xe2>
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
 80078a2:	e00f      	b.n	80078c4 <_malloc_r+0xb0>
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	1b52      	subs	r2, r2, r5
 80078a8:	d41f      	bmi.n	80078ea <_malloc_r+0xd6>
 80078aa:	2a0b      	cmp	r2, #11
 80078ac:	d917      	bls.n	80078de <_malloc_r+0xca>
 80078ae:	1961      	adds	r1, r4, r5
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	6025      	str	r5, [r4, #0]
 80078b4:	bf18      	it	ne
 80078b6:	6059      	strne	r1, [r3, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	bf08      	it	eq
 80078bc:	f8c8 1000 	streq.w	r1, [r8]
 80078c0:	5162      	str	r2, [r4, r5]
 80078c2:	604b      	str	r3, [r1, #4]
 80078c4:	4638      	mov	r0, r7
 80078c6:	f104 060b 	add.w	r6, r4, #11
 80078ca:	f000 f829 	bl	8007920 <__malloc_unlock>
 80078ce:	f026 0607 	bic.w	r6, r6, #7
 80078d2:	1d23      	adds	r3, r4, #4
 80078d4:	1af2      	subs	r2, r6, r3
 80078d6:	d0ae      	beq.n	8007836 <_malloc_r+0x22>
 80078d8:	1b9b      	subs	r3, r3, r6
 80078da:	50a3      	str	r3, [r4, r2]
 80078dc:	e7ab      	b.n	8007836 <_malloc_r+0x22>
 80078de:	42a3      	cmp	r3, r4
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	d1dd      	bne.n	80078a0 <_malloc_r+0x8c>
 80078e4:	f8c8 2000 	str.w	r2, [r8]
 80078e8:	e7ec      	b.n	80078c4 <_malloc_r+0xb0>
 80078ea:	4623      	mov	r3, r4
 80078ec:	6864      	ldr	r4, [r4, #4]
 80078ee:	e7ac      	b.n	800784a <_malloc_r+0x36>
 80078f0:	4634      	mov	r4, r6
 80078f2:	6876      	ldr	r6, [r6, #4]
 80078f4:	e7b4      	b.n	8007860 <_malloc_r+0x4c>
 80078f6:	4613      	mov	r3, r2
 80078f8:	e7cc      	b.n	8007894 <_malloc_r+0x80>
 80078fa:	230c      	movs	r3, #12
 80078fc:	4638      	mov	r0, r7
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	f000 f80e 	bl	8007920 <__malloc_unlock>
 8007904:	e797      	b.n	8007836 <_malloc_r+0x22>
 8007906:	6025      	str	r5, [r4, #0]
 8007908:	e7dc      	b.n	80078c4 <_malloc_r+0xb0>
 800790a:	605b      	str	r3, [r3, #4]
 800790c:	deff      	udf	#255	; 0xff
 800790e:	bf00      	nop
 8007910:	20003908 	.word	0x20003908

08007914 <__malloc_lock>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__malloc_lock+0x8>)
 8007916:	f7ff beef 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 800791a:	bf00      	nop
 800791c:	20003904 	.word	0x20003904

08007920 <__malloc_unlock>:
 8007920:	4801      	ldr	r0, [pc, #4]	; (8007928 <__malloc_unlock+0x8>)
 8007922:	f7ff beea 	b.w	80076fa <__retarget_lock_release_recursive>
 8007926:	bf00      	nop
 8007928:	20003904 	.word	0x20003904

0800792c <__sflush_r>:
 800792c:	898a      	ldrh	r2, [r1, #12]
 800792e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007930:	4605      	mov	r5, r0
 8007932:	0710      	lsls	r0, r2, #28
 8007934:	460c      	mov	r4, r1
 8007936:	d457      	bmi.n	80079e8 <__sflush_r+0xbc>
 8007938:	684b      	ldr	r3, [r1, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dc04      	bgt.n	8007948 <__sflush_r+0x1c>
 800793e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	dc01      	bgt.n	8007948 <__sflush_r+0x1c>
 8007944:	2000      	movs	r0, #0
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800794a:	2e00      	cmp	r6, #0
 800794c:	d0fa      	beq.n	8007944 <__sflush_r+0x18>
 800794e:	2300      	movs	r3, #0
 8007950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007954:	682f      	ldr	r7, [r5, #0]
 8007956:	6a21      	ldr	r1, [r4, #32]
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	d032      	beq.n	80079c2 <__sflush_r+0x96>
 800795c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	075a      	lsls	r2, r3, #29
 8007962:	d505      	bpl.n	8007970 <__sflush_r+0x44>
 8007964:	6863      	ldr	r3, [r4, #4]
 8007966:	1ac0      	subs	r0, r0, r3
 8007968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800796a:	b10b      	cbz	r3, 8007970 <__sflush_r+0x44>
 800796c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800796e:	1ac0      	subs	r0, r0, r3
 8007970:	2300      	movs	r3, #0
 8007972:	4602      	mov	r2, r0
 8007974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007976:	4628      	mov	r0, r5
 8007978:	6a21      	ldr	r1, [r4, #32]
 800797a:	47b0      	blx	r6
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	d106      	bne.n	8007990 <__sflush_r+0x64>
 8007982:	6829      	ldr	r1, [r5, #0]
 8007984:	291d      	cmp	r1, #29
 8007986:	d82b      	bhi.n	80079e0 <__sflush_r+0xb4>
 8007988:	4a28      	ldr	r2, [pc, #160]	; (8007a2c <__sflush_r+0x100>)
 800798a:	410a      	asrs	r2, r1
 800798c:	07d6      	lsls	r6, r2, #31
 800798e:	d427      	bmi.n	80079e0 <__sflush_r+0xb4>
 8007990:	2200      	movs	r2, #0
 8007992:	6062      	str	r2, [r4, #4]
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	04d9      	lsls	r1, r3, #19
 8007998:	6022      	str	r2, [r4, #0]
 800799a:	d504      	bpl.n	80079a6 <__sflush_r+0x7a>
 800799c:	1c42      	adds	r2, r0, #1
 800799e:	d101      	bne.n	80079a4 <__sflush_r+0x78>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b903      	cbnz	r3, 80079a6 <__sflush_r+0x7a>
 80079a4:	6560      	str	r0, [r4, #84]	; 0x54
 80079a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a8:	602f      	str	r7, [r5, #0]
 80079aa:	2900      	cmp	r1, #0
 80079ac:	d0ca      	beq.n	8007944 <__sflush_r+0x18>
 80079ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b2:	4299      	cmp	r1, r3
 80079b4:	d002      	beq.n	80079bc <__sflush_r+0x90>
 80079b6:	4628      	mov	r0, r5
 80079b8:	f7ff febc 	bl	8007734 <_free_r>
 80079bc:	2000      	movs	r0, #0
 80079be:	6360      	str	r0, [r4, #52]	; 0x34
 80079c0:	e7c1      	b.n	8007946 <__sflush_r+0x1a>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b0      	blx	r6
 80079c8:	1c41      	adds	r1, r0, #1
 80079ca:	d1c8      	bne.n	800795e <__sflush_r+0x32>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c5      	beq.n	800795e <__sflush_r+0x32>
 80079d2:	2b1d      	cmp	r3, #29
 80079d4:	d001      	beq.n	80079da <__sflush_r+0xae>
 80079d6:	2b16      	cmp	r3, #22
 80079d8:	d101      	bne.n	80079de <__sflush_r+0xb2>
 80079da:	602f      	str	r7, [r5, #0]
 80079dc:	e7b2      	b.n	8007944 <__sflush_r+0x18>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	e7ae      	b.n	8007946 <__sflush_r+0x1a>
 80079e8:	690f      	ldr	r7, [r1, #16]
 80079ea:	2f00      	cmp	r7, #0
 80079ec:	d0aa      	beq.n	8007944 <__sflush_r+0x18>
 80079ee:	0793      	lsls	r3, r2, #30
 80079f0:	bf18      	it	ne
 80079f2:	2300      	movne	r3, #0
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	bf08      	it	eq
 80079f8:	694b      	ldreq	r3, [r1, #20]
 80079fa:	1bf6      	subs	r6, r6, r7
 80079fc:	600f      	str	r7, [r1, #0]
 80079fe:	608b      	str	r3, [r1, #8]
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	dd9f      	ble.n	8007944 <__sflush_r+0x18>
 8007a04:	4633      	mov	r3, r6
 8007a06:	463a      	mov	r2, r7
 8007a08:	4628      	mov	r0, r5
 8007a0a:	6a21      	ldr	r1, [r4, #32]
 8007a0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a10:	47e0      	blx	ip
 8007a12:	2800      	cmp	r0, #0
 8007a14:	dc06      	bgt.n	8007a24 <__sflush_r+0xf8>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a20:	81a3      	strh	r3, [r4, #12]
 8007a22:	e790      	b.n	8007946 <__sflush_r+0x1a>
 8007a24:	4407      	add	r7, r0
 8007a26:	1a36      	subs	r6, r6, r0
 8007a28:	e7ea      	b.n	8007a00 <__sflush_r+0xd4>
 8007a2a:	bf00      	nop
 8007a2c:	dfbffffe 	.word	0xdfbffffe

08007a30 <_fflush_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	690b      	ldr	r3, [r1, #16]
 8007a34:	4605      	mov	r5, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	b913      	cbnz	r3, 8007a40 <_fflush_r+0x10>
 8007a3a:	2500      	movs	r5, #0
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	b118      	cbz	r0, 8007a4a <_fflush_r+0x1a>
 8007a42:	6a03      	ldr	r3, [r0, #32]
 8007a44:	b90b      	cbnz	r3, 8007a4a <_fflush_r+0x1a>
 8007a46:	f7ff fb0b 	bl	8007060 <__sinit>
 8007a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f3      	beq.n	8007a3a <_fflush_r+0xa>
 8007a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a54:	07d0      	lsls	r0, r2, #31
 8007a56:	d404      	bmi.n	8007a62 <_fflush_r+0x32>
 8007a58:	0599      	lsls	r1, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_fflush_r+0x32>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a5e:	f7ff fe4b 	bl	80076f8 <__retarget_lock_acquire_recursive>
 8007a62:	4628      	mov	r0, r5
 8007a64:	4621      	mov	r1, r4
 8007a66:	f7ff ff61 	bl	800792c <__sflush_r>
 8007a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	07da      	lsls	r2, r3, #31
 8007a70:	d4e4      	bmi.n	8007a3c <_fflush_r+0xc>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	059b      	lsls	r3, r3, #22
 8007a76:	d4e1      	bmi.n	8007a3c <_fflush_r+0xc>
 8007a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7a:	f7ff fe3e 	bl	80076fa <__retarget_lock_release_recursive>
 8007a7e:	e7dd      	b.n	8007a3c <_fflush_r+0xc>

08007a80 <__swhatbuf_r>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	460c      	mov	r4, r1
 8007a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a88:	4615      	mov	r5, r2
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	461e      	mov	r6, r3
 8007a8e:	b096      	sub	sp, #88	; 0x58
 8007a90:	da0c      	bge.n	8007aac <__swhatbuf_r+0x2c>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	2100      	movs	r1, #0
 8007a96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a9a:	bf0c      	ite	eq
 8007a9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007aa0:	2340      	movne	r3, #64	; 0x40
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	6031      	str	r1, [r6, #0]
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	b016      	add	sp, #88	; 0x58
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	466a      	mov	r2, sp
 8007aae:	f000 f849 	bl	8007b44 <_fstat_r>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	dbed      	blt.n	8007a92 <__swhatbuf_r+0x12>
 8007ab6:	9901      	ldr	r1, [sp, #4]
 8007ab8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007abc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ac0:	4259      	negs	r1, r3
 8007ac2:	4159      	adcs	r1, r3
 8007ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac8:	e7eb      	b.n	8007aa2 <__swhatbuf_r+0x22>

08007aca <__smakebuf_r>:
 8007aca:	898b      	ldrh	r3, [r1, #12]
 8007acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ace:	079d      	lsls	r5, r3, #30
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	d507      	bpl.n	8007ae6 <__smakebuf_r+0x1c>
 8007ad6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	6123      	str	r3, [r4, #16]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	6163      	str	r3, [r4, #20]
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	466a      	mov	r2, sp
 8007ae8:	ab01      	add	r3, sp, #4
 8007aea:	f7ff ffc9 	bl	8007a80 <__swhatbuf_r>
 8007aee:	9900      	ldr	r1, [sp, #0]
 8007af0:	4605      	mov	r5, r0
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff fe8e 	bl	8007814 <_malloc_r>
 8007af8:	b948      	cbnz	r0, 8007b0e <__smakebuf_r+0x44>
 8007afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afe:	059a      	lsls	r2, r3, #22
 8007b00:	d4ef      	bmi.n	8007ae2 <__smakebuf_r+0x18>
 8007b02:	f023 0303 	bic.w	r3, r3, #3
 8007b06:	f043 0302 	orr.w	r3, r3, #2
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	e7e3      	b.n	8007ad6 <__smakebuf_r+0xc>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	6020      	str	r0, [r4, #0]
 8007b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	9b00      	ldr	r3, [sp, #0]
 8007b1a:	6120      	str	r0, [r4, #16]
 8007b1c:	6163      	str	r3, [r4, #20]
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	b15b      	cbz	r3, 8007b3a <__smakebuf_r+0x70>
 8007b22:	4630      	mov	r0, r6
 8007b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b28:	f000 f81e 	bl	8007b68 <_isatty_r>
 8007b2c:	b128      	cbz	r0, 8007b3a <__smakebuf_r+0x70>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f023 0303 	bic.w	r3, r3, #3
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	431d      	orrs	r5, r3
 8007b3e:	81a5      	strh	r5, [r4, #12]
 8007b40:	e7cf      	b.n	8007ae2 <__smakebuf_r+0x18>
	...

08007b44 <_fstat_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	2300      	movs	r3, #0
 8007b48:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_fstat_r+0x20>)
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7f9 f90f 	bl	8000d74 <_fstat>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_fstat_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_fstat_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	20003900 	.word	0x20003900

08007b68 <_isatty_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4d05      	ldr	r5, [pc, #20]	; (8007b84 <_isatty_r+0x1c>)
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f7f9 f90d 	bl	8000d92 <_isatty>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_isatty_r+0x1a>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_isatty_r+0x1a>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	20003900 	.word	0x20003900

08007b88 <_sbrk_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4d05      	ldr	r5, [pc, #20]	; (8007ba4 <_sbrk_r+0x1c>)
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	f7f9 f914 	bl	8000dc0 <_sbrk>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_sbrk_r+0x1a>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_sbrk_r+0x1a>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	20003900 	.word	0x20003900

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
